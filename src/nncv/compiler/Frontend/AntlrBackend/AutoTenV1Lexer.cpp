
// Generated from ./AutoTenV1Lexer.g4 by ANTLR 4.13.0


#include "AutoTenV1Lexer.h"


using namespace antlr4;

using namespace antlrcpp;


using namespace antlr4;

namespace {

struct AutoTenV1LexerStaticData final {
  AutoTenV1LexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  AutoTenV1LexerStaticData(const AutoTenV1LexerStaticData&) = delete;
  AutoTenV1LexerStaticData(AutoTenV1LexerStaticData&&) = delete;
  AutoTenV1LexerStaticData& operator=(const AutoTenV1LexerStaticData&) = delete;
  AutoTenV1LexerStaticData& operator=(AutoTenV1LexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag autotenv1lexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
AutoTenV1LexerStaticData *autotenv1lexerLexerStaticData = nullptr;

void autotenv1lexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (autotenv1lexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(autotenv1lexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<AutoTenV1LexerStaticData>(
    std::vector<std::string>{
      "IntegerLiteral", "CharacterLiteral", "FloatingLiteral", "StringLiteral", 
      "BooleanLiteral", "PointerLiteral", "UserDefinedLiteral", "Int8", 
      "Int16", "Int32", "Int64", "Float32", "Float64", "Char", "Bool", "String", 
      "Tensor", "Var", "False_", "True_", "Void", "Nilptr", "Break", "Continue", 
      "Goto", "Fallthrough", "If", "While", "For", "Pfor", "Else", "Do", 
      "Switch", "Case", "Default", "Function", "Return", "Struct", "Type", 
      "Package", "Impl", "Public", "Sizeof", "LeftParen", "RightParen", 
      "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Plus", 
      "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", "Tilde", "Not", 
      "Assign", "DeclareAssign", "Less", "Greater", "LeftShift", "RightShift", 
      "NotEqual", "Equal", "LessEqual", "GreaterEqual", "AndAnd", "OrOr", 
      "PlusPlus", "MinusMinus", "Comma", "ArrowReturnType", "Colon", "Dot", 
      "DotStar", "ArrowStar", "At", "Semi", "Map", "Ellipsis", "Hexquad", 
      "Universalcharactername", "Identifier", "Identifiernondigit", "NONDIGIT", 
      "DIGIT", "DecimalLiteral", "OctalLiteral", "HexadecimalLiteral", "BinaryLiteral", 
      "NONZERODIGIT", "OCTALDIGIT", "HEXADECIMALDIGIT", "BINARYDIGIT", "Integersuffix", 
      "Unsignedsuffix", "Longsuffix", "Longlongsuffix", "Cchar", "Escapesequence", 
      "Simpleescapesequence", "Octalescapesequence", "Hexadecimalescapesequence", 
      "Fractionalconstant", "Exponentpart", "SIGN", "Digitsequence", "Floatingsuffix", 
      "Encodingprefix", "Schar", "Rawstring", "UserDefinedIntegerLiteral", 
      "UserDefinedFloatingLiteral", "UserDefinedStringLiteral", "UserDefinedCharacterLiteral", 
      "Udsuffix", "Whitespace", "Newline", "BlockComment", "LineComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "'int8'", "'int16'", "'int32'", "'int64'", 
      "'float32'", "'float64'", "'char'", "'bool'", "'string'", "'Tensor'", 
      "'var'", "'false'", "'true'", "'void'", "'nil'", "'break'", "'continue'", 
      "'goto'", "'fallthrough'", "'if'", "'while'", "'for'", "'pfor'", "'else'", 
      "'do'", "'switch'", "'case'", "'default'", "'func'", "'return'", "'struct'", 
      "'type'", "'package'", "'impl'", "'pub'", "'sizeof'", "'('", "')'", 
      "'['", "']'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "", "", "'&'", 
      "'|'", "'~'", "", "'='", "':='", "'<'", "'>'", "'<<'", "'>>'", "'!='", 
      "'=='", "'<='", "'>='", "", "", "'++'", "'--'", "','", "'->'", "':'", 
      "'.'", "'.*'", "'->*'", "'@'", "';'", "'map'", "'...'"
    },
    std::vector<std::string>{
      "", "IntegerLiteral", "CharacterLiteral", "FloatingLiteral", "StringLiteral", 
      "BooleanLiteral", "PointerLiteral", "UserDefinedLiteral", "Int8", 
      "Int16", "Int32", "Int64", "Float32", "Float64", "Char", "Bool", "String", 
      "Tensor", "Var", "False_", "True_", "Void", "Nilptr", "Break", "Continue", 
      "Goto", "Fallthrough", "If", "While", "For", "Pfor", "Else", "Do", 
      "Switch", "Case", "Default", "Function", "Return", "Struct", "Type", 
      "Package", "Impl", "Public", "Sizeof", "LeftParen", "RightParen", 
      "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Plus", 
      "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", "Tilde", "Not", 
      "Assign", "DeclareAssign", "Less", "Greater", "LeftShift", "RightShift", 
      "NotEqual", "Equal", "LessEqual", "GreaterEqual", "AndAnd", "OrOr", 
      "PlusPlus", "MinusMinus", "Comma", "ArrowReturnType", "Colon", "Dot", 
      "DotStar", "ArrowStar", "At", "Semi", "Map", "Ellipsis", "Identifier", 
      "DecimalLiteral", "OctalLiteral", "HexadecimalLiteral", "BinaryLiteral", 
      "Integersuffix", "UserDefinedIntegerLiteral", "UserDefinedFloatingLiteral", 
      "UserDefinedStringLiteral", "UserDefinedCharacterLiteral", "Whitespace", 
      "Newline", "BlockComment", "LineComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,97,972,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,1,0,1,0,3,0,250,8,0,1,0,1,0,3,0,254,8,0,1,0,1,0,3,0,258,8,0,1,0,
  	1,0,3,0,262,8,0,3,0,264,8,0,1,1,3,1,267,8,1,1,1,1,1,4,1,271,8,1,11,1,
  	12,1,272,1,1,1,1,1,2,1,2,3,2,279,8,2,1,2,3,2,282,8,2,1,2,1,2,1,2,3,2,
  	287,8,2,3,2,289,8,2,1,3,3,3,292,8,3,1,3,1,3,1,3,5,3,297,8,3,10,3,12,3,
  	300,9,3,1,3,3,3,303,8,3,1,4,1,4,3,4,307,8,4,1,5,1,5,1,6,1,6,1,6,1,6,3,
  	6,315,8,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
  	1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,
  	11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,
  	13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
  	16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
  	18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,
  	21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,
  	25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,
  	27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,
  	30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,
  	33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,
  	35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,
  	37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
  	40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,
  	42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,
  	49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,53,1,53,3,53,554,8,
  	53,1,54,1,54,1,54,1,54,3,54,560,8,54,1,55,1,55,1,56,1,56,1,57,1,57,1,
  	58,1,58,1,58,1,58,3,58,572,8,58,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,
  	62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,66,1,
  	67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,3,69,606,8,69,1,
  	70,1,70,1,70,1,70,3,70,612,8,70,1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,
  	73,1,74,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,1,
  	78,1,79,1,79,1,80,1,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,83,1,
  	83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,
  	84,663,8,84,1,85,1,85,1,85,5,85,668,8,85,10,85,12,85,671,9,85,1,86,1,
  	86,3,86,675,8,86,1,87,1,87,1,88,1,88,1,89,1,89,3,89,683,8,89,1,89,5,89,
  	686,8,89,10,89,12,89,689,9,89,1,90,1,90,3,90,693,8,90,1,90,5,90,696,8,
  	90,10,90,12,90,699,9,90,1,91,1,91,1,91,1,91,3,91,705,8,91,1,91,1,91,3,
  	91,709,8,91,1,91,5,91,712,8,91,10,91,12,91,715,9,91,1,92,1,92,1,92,1,
  	92,3,92,721,8,92,1,92,1,92,3,92,725,8,92,1,92,5,92,728,8,92,10,92,12,
  	92,731,9,92,1,93,1,93,1,94,1,94,1,95,1,95,1,96,1,96,1,97,1,97,3,97,743,
  	8,97,1,97,1,97,3,97,747,8,97,1,97,1,97,3,97,751,8,97,1,97,1,97,3,97,755,
  	8,97,3,97,757,8,97,1,98,1,98,1,99,1,99,1,100,1,100,1,100,1,100,3,100,
  	767,8,100,1,101,1,101,1,101,3,101,772,8,101,1,102,1,102,1,102,3,102,777,
  	8,102,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,800,
  	8,103,1,103,3,103,803,8,103,1,103,1,103,1,103,1,103,3,103,809,8,103,1,
  	104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,
  	822,8,104,1,105,1,105,1,105,1,105,4,105,828,8,105,11,105,12,105,829,1,
  	106,3,106,833,8,106,1,106,1,106,1,106,1,106,1,106,3,106,840,8,106,1,107,
  	1,107,3,107,844,8,107,1,107,1,107,1,107,3,107,849,8,107,1,107,3,107,852,
  	8,107,1,108,1,108,1,109,1,109,3,109,858,8,109,1,109,5,109,861,8,109,10,
  	109,12,109,864,9,109,1,110,1,110,1,111,1,111,1,111,3,111,871,8,111,1,
  	112,1,112,1,112,3,112,876,8,112,1,113,1,113,1,113,1,113,1,113,1,113,5,
  	113,884,8,113,10,113,12,113,887,9,113,1,113,1,113,5,113,891,8,113,10,
  	113,12,113,894,9,113,1,113,1,113,1,113,1,113,5,113,900,8,113,10,113,12,
  	113,903,9,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,
  	114,1,114,1,114,1,114,1,114,3,114,919,8,114,1,115,1,115,3,115,923,8,115,
  	1,115,1,115,1,115,1,115,1,115,1,115,3,115,931,8,115,1,116,1,116,1,116,
  	1,117,1,117,1,117,1,118,1,118,1,119,4,119,942,8,119,11,119,12,119,943,
  	1,119,1,119,1,120,1,120,3,120,950,8,120,1,120,3,120,953,8,120,1,120,1,
  	120,1,121,1,121,1,121,1,121,3,121,961,8,121,1,121,1,121,1,121,1,121,1,
  	121,1,122,1,122,1,122,1,122,1,122,3,885,892,901,0,123,1,1,3,2,5,3,7,4,
  	9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
  	17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
  	57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
  	40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
  	103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,
  	123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,
  	143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,
  	163,82,165,83,167,0,169,0,171,84,173,0,175,0,177,0,179,85,181,86,183,
  	87,185,88,187,0,189,0,191,0,193,0,195,89,197,0,199,0,201,0,203,0,205,
  	0,207,0,209,0,211,0,213,0,215,0,217,0,219,0,221,0,223,0,225,0,227,0,229,
  	90,231,91,233,92,235,93,237,0,239,94,241,95,243,96,245,97,1,0,19,3,0,
  	76,76,85,85,117,117,3,0,65,90,95,95,97,122,1,0,48,57,1,0,49,57,1,0,48,
  	55,3,0,48,57,65,70,97,102,1,0,48,49,2,0,85,85,117,117,2,0,76,76,108,108,
  	4,0,10,10,13,13,39,39,92,92,2,0,43,43,45,45,4,0,70,70,76,76,102,102,108,
  	108,4,0,10,10,13,13,34,34,92,92,2,0,34,34,40,41,4,0,10,10,13,13,32,32,
  	40,40,1,0,41,41,4,0,10,10,13,13,32,32,34,34,2,0,9,9,32,32,2,0,10,10,13,
  	13,1036,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
  	11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
  	0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
  	0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
  	43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
  	0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
  	0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
  	75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
  	0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
  	0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,
  	0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,
  	0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,
  	0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,
  	0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,
  	0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,
  	0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,
  	0,171,1,0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,
  	0,195,1,0,0,0,0,229,1,0,0,0,0,231,1,0,0,0,0,233,1,0,0,0,0,235,1,0,0,0,
  	0,239,1,0,0,0,0,241,1,0,0,0,0,243,1,0,0,0,0,245,1,0,0,0,1,263,1,0,0,0,
  	3,266,1,0,0,0,5,288,1,0,0,0,7,291,1,0,0,0,9,306,1,0,0,0,11,308,1,0,0,
  	0,13,314,1,0,0,0,15,316,1,0,0,0,17,321,1,0,0,0,19,327,1,0,0,0,21,333,
  	1,0,0,0,23,339,1,0,0,0,25,347,1,0,0,0,27,355,1,0,0,0,29,360,1,0,0,0,31,
  	365,1,0,0,0,33,372,1,0,0,0,35,379,1,0,0,0,37,383,1,0,0,0,39,389,1,0,0,
  	0,41,394,1,0,0,0,43,399,1,0,0,0,45,403,1,0,0,0,47,409,1,0,0,0,49,418,
  	1,0,0,0,51,423,1,0,0,0,53,435,1,0,0,0,55,438,1,0,0,0,57,444,1,0,0,0,59,
  	448,1,0,0,0,61,453,1,0,0,0,63,458,1,0,0,0,65,461,1,0,0,0,67,468,1,0,0,
  	0,69,473,1,0,0,0,71,481,1,0,0,0,73,486,1,0,0,0,75,493,1,0,0,0,77,500,
  	1,0,0,0,79,505,1,0,0,0,81,513,1,0,0,0,83,518,1,0,0,0,85,522,1,0,0,0,87,
  	529,1,0,0,0,89,531,1,0,0,0,91,533,1,0,0,0,93,535,1,0,0,0,95,537,1,0,0,
  	0,97,539,1,0,0,0,99,541,1,0,0,0,101,543,1,0,0,0,103,545,1,0,0,0,105,547,
  	1,0,0,0,107,553,1,0,0,0,109,559,1,0,0,0,111,561,1,0,0,0,113,563,1,0,0,
  	0,115,565,1,0,0,0,117,571,1,0,0,0,119,573,1,0,0,0,121,575,1,0,0,0,123,
  	578,1,0,0,0,125,580,1,0,0,0,127,582,1,0,0,0,129,585,1,0,0,0,131,588,1,
  	0,0,0,133,591,1,0,0,0,135,594,1,0,0,0,137,597,1,0,0,0,139,605,1,0,0,0,
  	141,611,1,0,0,0,143,613,1,0,0,0,145,616,1,0,0,0,147,619,1,0,0,0,149,621,
  	1,0,0,0,151,624,1,0,0,0,153,626,1,0,0,0,155,628,1,0,0,0,157,631,1,0,0,
  	0,159,635,1,0,0,0,161,637,1,0,0,0,163,639,1,0,0,0,165,643,1,0,0,0,167,
  	647,1,0,0,0,169,662,1,0,0,0,171,664,1,0,0,0,173,674,1,0,0,0,175,676,1,
  	0,0,0,177,678,1,0,0,0,179,680,1,0,0,0,181,690,1,0,0,0,183,704,1,0,0,0,
  	185,720,1,0,0,0,187,732,1,0,0,0,189,734,1,0,0,0,191,736,1,0,0,0,193,738,
  	1,0,0,0,195,756,1,0,0,0,197,758,1,0,0,0,199,760,1,0,0,0,201,766,1,0,0,
  	0,203,771,1,0,0,0,205,776,1,0,0,0,207,808,1,0,0,0,209,821,1,0,0,0,211,
  	823,1,0,0,0,213,839,1,0,0,0,215,851,1,0,0,0,217,853,1,0,0,0,219,855,1,
  	0,0,0,221,865,1,0,0,0,223,870,1,0,0,0,225,875,1,0,0,0,227,877,1,0,0,0,
  	229,918,1,0,0,0,231,930,1,0,0,0,233,932,1,0,0,0,235,935,1,0,0,0,237,938,
  	1,0,0,0,239,941,1,0,0,0,241,952,1,0,0,0,243,956,1,0,0,0,245,967,1,0,0,
  	0,247,249,3,179,89,0,248,250,3,195,97,0,249,248,1,0,0,0,249,250,1,0,0,
  	0,250,264,1,0,0,0,251,253,3,181,90,0,252,254,3,195,97,0,253,252,1,0,0,
  	0,253,254,1,0,0,0,254,264,1,0,0,0,255,257,3,183,91,0,256,258,3,195,97,
  	0,257,256,1,0,0,0,257,258,1,0,0,0,258,264,1,0,0,0,259,261,3,185,92,0,
  	260,262,3,195,97,0,261,260,1,0,0,0,261,262,1,0,0,0,262,264,1,0,0,0,263,
  	247,1,0,0,0,263,251,1,0,0,0,263,255,1,0,0,0,263,259,1,0,0,0,264,2,1,0,
  	0,0,265,267,7,0,0,0,266,265,1,0,0,0,266,267,1,0,0,0,267,268,1,0,0,0,268,
  	270,5,39,0,0,269,271,3,203,101,0,270,269,1,0,0,0,271,272,1,0,0,0,272,
  	270,1,0,0,0,272,273,1,0,0,0,273,274,1,0,0,0,274,275,5,39,0,0,275,4,1,
  	0,0,0,276,278,3,213,106,0,277,279,3,215,107,0,278,277,1,0,0,0,278,279,
  	1,0,0,0,279,281,1,0,0,0,280,282,3,221,110,0,281,280,1,0,0,0,281,282,1,
  	0,0,0,282,289,1,0,0,0,283,284,3,219,109,0,284,286,3,215,107,0,285,287,
  	3,221,110,0,286,285,1,0,0,0,286,287,1,0,0,0,287,289,1,0,0,0,288,276,1,
  	0,0,0,288,283,1,0,0,0,289,6,1,0,0,0,290,292,3,223,111,0,291,290,1,0,0,
  	0,291,292,1,0,0,0,292,302,1,0,0,0,293,303,3,227,113,0,294,298,5,34,0,
  	0,295,297,3,225,112,0,296,295,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,
  	298,299,1,0,0,0,299,301,1,0,0,0,300,298,1,0,0,0,301,303,5,34,0,0,302,
  	293,1,0,0,0,302,294,1,0,0,0,303,8,1,0,0,0,304,307,3,37,18,0,305,307,3,
  	39,19,0,306,304,1,0,0,0,306,305,1,0,0,0,307,10,1,0,0,0,308,309,3,43,21,
  	0,309,12,1,0,0,0,310,315,3,229,114,0,311,315,3,231,115,0,312,315,3,233,
  	116,0,313,315,3,235,117,0,314,310,1,0,0,0,314,311,1,0,0,0,314,312,1,0,
  	0,0,314,313,1,0,0,0,315,14,1,0,0,0,316,317,5,105,0,0,317,318,5,110,0,
  	0,318,319,5,116,0,0,319,320,5,56,0,0,320,16,1,0,0,0,321,322,5,105,0,0,
  	322,323,5,110,0,0,323,324,5,116,0,0,324,325,5,49,0,0,325,326,5,54,0,0,
  	326,18,1,0,0,0,327,328,5,105,0,0,328,329,5,110,0,0,329,330,5,116,0,0,
  	330,331,5,51,0,0,331,332,5,50,0,0,332,20,1,0,0,0,333,334,5,105,0,0,334,
  	335,5,110,0,0,335,336,5,116,0,0,336,337,5,54,0,0,337,338,5,52,0,0,338,
  	22,1,0,0,0,339,340,5,102,0,0,340,341,5,108,0,0,341,342,5,111,0,0,342,
  	343,5,97,0,0,343,344,5,116,0,0,344,345,5,51,0,0,345,346,5,50,0,0,346,
  	24,1,0,0,0,347,348,5,102,0,0,348,349,5,108,0,0,349,350,5,111,0,0,350,
  	351,5,97,0,0,351,352,5,116,0,0,352,353,5,54,0,0,353,354,5,52,0,0,354,
  	26,1,0,0,0,355,356,5,99,0,0,356,357,5,104,0,0,357,358,5,97,0,0,358,359,
  	5,114,0,0,359,28,1,0,0,0,360,361,5,98,0,0,361,362,5,111,0,0,362,363,5,
  	111,0,0,363,364,5,108,0,0,364,30,1,0,0,0,365,366,5,115,0,0,366,367,5,
  	116,0,0,367,368,5,114,0,0,368,369,5,105,0,0,369,370,5,110,0,0,370,371,
  	5,103,0,0,371,32,1,0,0,0,372,373,5,84,0,0,373,374,5,101,0,0,374,375,5,
  	110,0,0,375,376,5,115,0,0,376,377,5,111,0,0,377,378,5,114,0,0,378,34,
  	1,0,0,0,379,380,5,118,0,0,380,381,5,97,0,0,381,382,5,114,0,0,382,36,1,
  	0,0,0,383,384,5,102,0,0,384,385,5,97,0,0,385,386,5,108,0,0,386,387,5,
  	115,0,0,387,388,5,101,0,0,388,38,1,0,0,0,389,390,5,116,0,0,390,391,5,
  	114,0,0,391,392,5,117,0,0,392,393,5,101,0,0,393,40,1,0,0,0,394,395,5,
  	118,0,0,395,396,5,111,0,0,396,397,5,105,0,0,397,398,5,100,0,0,398,42,
  	1,0,0,0,399,400,5,110,0,0,400,401,5,105,0,0,401,402,5,108,0,0,402,44,
  	1,0,0,0,403,404,5,98,0,0,404,405,5,114,0,0,405,406,5,101,0,0,406,407,
  	5,97,0,0,407,408,5,107,0,0,408,46,1,0,0,0,409,410,5,99,0,0,410,411,5,
  	111,0,0,411,412,5,110,0,0,412,413,5,116,0,0,413,414,5,105,0,0,414,415,
  	5,110,0,0,415,416,5,117,0,0,416,417,5,101,0,0,417,48,1,0,0,0,418,419,
  	5,103,0,0,419,420,5,111,0,0,420,421,5,116,0,0,421,422,5,111,0,0,422,50,
  	1,0,0,0,423,424,5,102,0,0,424,425,5,97,0,0,425,426,5,108,0,0,426,427,
  	5,108,0,0,427,428,5,116,0,0,428,429,5,104,0,0,429,430,5,114,0,0,430,431,
  	5,111,0,0,431,432,5,117,0,0,432,433,5,103,0,0,433,434,5,104,0,0,434,52,
  	1,0,0,0,435,436,5,105,0,0,436,437,5,102,0,0,437,54,1,0,0,0,438,439,5,
  	119,0,0,439,440,5,104,0,0,440,441,5,105,0,0,441,442,5,108,0,0,442,443,
  	5,101,0,0,443,56,1,0,0,0,444,445,5,102,0,0,445,446,5,111,0,0,446,447,
  	5,114,0,0,447,58,1,0,0,0,448,449,5,112,0,0,449,450,5,102,0,0,450,451,
  	5,111,0,0,451,452,5,114,0,0,452,60,1,0,0,0,453,454,5,101,0,0,454,455,
  	5,108,0,0,455,456,5,115,0,0,456,457,5,101,0,0,457,62,1,0,0,0,458,459,
  	5,100,0,0,459,460,5,111,0,0,460,64,1,0,0,0,461,462,5,115,0,0,462,463,
  	5,119,0,0,463,464,5,105,0,0,464,465,5,116,0,0,465,466,5,99,0,0,466,467,
  	5,104,0,0,467,66,1,0,0,0,468,469,5,99,0,0,469,470,5,97,0,0,470,471,5,
  	115,0,0,471,472,5,101,0,0,472,68,1,0,0,0,473,474,5,100,0,0,474,475,5,
  	101,0,0,475,476,5,102,0,0,476,477,5,97,0,0,477,478,5,117,0,0,478,479,
  	5,108,0,0,479,480,5,116,0,0,480,70,1,0,0,0,481,482,5,102,0,0,482,483,
  	5,117,0,0,483,484,5,110,0,0,484,485,5,99,0,0,485,72,1,0,0,0,486,487,5,
  	114,0,0,487,488,5,101,0,0,488,489,5,116,0,0,489,490,5,117,0,0,490,491,
  	5,114,0,0,491,492,5,110,0,0,492,74,1,0,0,0,493,494,5,115,0,0,494,495,
  	5,116,0,0,495,496,5,114,0,0,496,497,5,117,0,0,497,498,5,99,0,0,498,499,
  	5,116,0,0,499,76,1,0,0,0,500,501,5,116,0,0,501,502,5,121,0,0,502,503,
  	5,112,0,0,503,504,5,101,0,0,504,78,1,0,0,0,505,506,5,112,0,0,506,507,
  	5,97,0,0,507,508,5,99,0,0,508,509,5,107,0,0,509,510,5,97,0,0,510,511,
  	5,103,0,0,511,512,5,101,0,0,512,80,1,0,0,0,513,514,5,105,0,0,514,515,
  	5,109,0,0,515,516,5,112,0,0,516,517,5,108,0,0,517,82,1,0,0,0,518,519,
  	5,112,0,0,519,520,5,117,0,0,520,521,5,98,0,0,521,84,1,0,0,0,522,523,5,
  	115,0,0,523,524,5,105,0,0,524,525,5,122,0,0,525,526,5,101,0,0,526,527,
  	5,111,0,0,527,528,5,102,0,0,528,86,1,0,0,0,529,530,5,40,0,0,530,88,1,
  	0,0,0,531,532,5,41,0,0,532,90,1,0,0,0,533,534,5,91,0,0,534,92,1,0,0,0,
  	535,536,5,93,0,0,536,94,1,0,0,0,537,538,5,123,0,0,538,96,1,0,0,0,539,
  	540,5,125,0,0,540,98,1,0,0,0,541,542,5,43,0,0,542,100,1,0,0,0,543,544,
  	5,45,0,0,544,102,1,0,0,0,545,546,5,42,0,0,546,104,1,0,0,0,547,548,5,47,
  	0,0,548,106,1,0,0,0,549,554,5,37,0,0,550,551,5,109,0,0,551,552,5,111,
  	0,0,552,554,5,100,0,0,553,549,1,0,0,0,553,550,1,0,0,0,554,108,1,0,0,0,
  	555,560,5,94,0,0,556,557,5,120,0,0,557,558,5,111,0,0,558,560,5,114,0,
  	0,559,555,1,0,0,0,559,556,1,0,0,0,560,110,1,0,0,0,561,562,5,38,0,0,562,
  	112,1,0,0,0,563,564,5,124,0,0,564,114,1,0,0,0,565,566,5,126,0,0,566,116,
  	1,0,0,0,567,572,5,33,0,0,568,569,5,110,0,0,569,570,5,111,0,0,570,572,
  	5,116,0,0,571,567,1,0,0,0,571,568,1,0,0,0,572,118,1,0,0,0,573,574,5,61,
  	0,0,574,120,1,0,0,0,575,576,5,58,0,0,576,577,5,61,0,0,577,122,1,0,0,0,
  	578,579,5,60,0,0,579,124,1,0,0,0,580,581,5,62,0,0,581,126,1,0,0,0,582,
  	583,5,60,0,0,583,584,5,60,0,0,584,128,1,0,0,0,585,586,5,62,0,0,586,587,
  	5,62,0,0,587,130,1,0,0,0,588,589,5,33,0,0,589,590,5,61,0,0,590,132,1,
  	0,0,0,591,592,5,61,0,0,592,593,5,61,0,0,593,134,1,0,0,0,594,595,5,60,
  	0,0,595,596,5,61,0,0,596,136,1,0,0,0,597,598,5,62,0,0,598,599,5,61,0,
  	0,599,138,1,0,0,0,600,601,5,38,0,0,601,606,5,38,0,0,602,603,5,97,0,0,
  	603,604,5,110,0,0,604,606,5,100,0,0,605,600,1,0,0,0,605,602,1,0,0,0,606,
  	140,1,0,0,0,607,608,5,124,0,0,608,612,5,124,0,0,609,610,5,111,0,0,610,
  	612,5,114,0,0,611,607,1,0,0,0,611,609,1,0,0,0,612,142,1,0,0,0,613,614,
  	5,43,0,0,614,615,5,43,0,0,615,144,1,0,0,0,616,617,5,45,0,0,617,618,5,
  	45,0,0,618,146,1,0,0,0,619,620,5,44,0,0,620,148,1,0,0,0,621,622,5,45,
  	0,0,622,623,5,62,0,0,623,150,1,0,0,0,624,625,5,58,0,0,625,152,1,0,0,0,
  	626,627,5,46,0,0,627,154,1,0,0,0,628,629,5,46,0,0,629,630,5,42,0,0,630,
  	156,1,0,0,0,631,632,5,45,0,0,632,633,5,62,0,0,633,634,5,42,0,0,634,158,
  	1,0,0,0,635,636,5,64,0,0,636,160,1,0,0,0,637,638,5,59,0,0,638,162,1,0,
  	0,0,639,640,5,109,0,0,640,641,5,97,0,0,641,642,5,112,0,0,642,164,1,0,
  	0,0,643,644,5,46,0,0,644,645,5,46,0,0,645,646,5,46,0,0,646,166,1,0,0,
  	0,647,648,3,191,95,0,648,649,3,191,95,0,649,650,3,191,95,0,650,651,3,
  	191,95,0,651,168,1,0,0,0,652,653,5,92,0,0,653,654,5,117,0,0,654,655,1,
  	0,0,0,655,663,3,167,83,0,656,657,5,92,0,0,657,658,5,85,0,0,658,659,1,
  	0,0,0,659,660,3,167,83,0,660,661,3,167,83,0,661,663,1,0,0,0,662,652,1,
  	0,0,0,662,656,1,0,0,0,663,170,1,0,0,0,664,669,3,173,86,0,665,668,3,173,
  	86,0,666,668,3,177,88,0,667,665,1,0,0,0,667,666,1,0,0,0,668,671,1,0,0,
  	0,669,667,1,0,0,0,669,670,1,0,0,0,670,172,1,0,0,0,671,669,1,0,0,0,672,
  	675,3,175,87,0,673,675,3,169,84,0,674,672,1,0,0,0,674,673,1,0,0,0,675,
  	174,1,0,0,0,676,677,7,1,0,0,677,176,1,0,0,0,678,679,7,2,0,0,679,178,1,
  	0,0,0,680,687,3,187,93,0,681,683,5,39,0,0,682,681,1,0,0,0,682,683,1,0,
  	0,0,683,684,1,0,0,0,684,686,3,177,88,0,685,682,1,0,0,0,686,689,1,0,0,
  	0,687,685,1,0,0,0,687,688,1,0,0,0,688,180,1,0,0,0,689,687,1,0,0,0,690,
  	697,5,48,0,0,691,693,5,39,0,0,692,691,1,0,0,0,692,693,1,0,0,0,693,694,
  	1,0,0,0,694,696,3,189,94,0,695,692,1,0,0,0,696,699,1,0,0,0,697,695,1,
  	0,0,0,697,698,1,0,0,0,698,182,1,0,0,0,699,697,1,0,0,0,700,701,5,48,0,
  	0,701,705,5,120,0,0,702,703,5,48,0,0,703,705,5,88,0,0,704,700,1,0,0,0,
  	704,702,1,0,0,0,705,706,1,0,0,0,706,713,3,191,95,0,707,709,5,39,0,0,708,
  	707,1,0,0,0,708,709,1,0,0,0,709,710,1,0,0,0,710,712,3,191,95,0,711,708,
  	1,0,0,0,712,715,1,0,0,0,713,711,1,0,0,0,713,714,1,0,0,0,714,184,1,0,0,
  	0,715,713,1,0,0,0,716,717,5,48,0,0,717,721,5,98,0,0,718,719,5,48,0,0,
  	719,721,5,66,0,0,720,716,1,0,0,0,720,718,1,0,0,0,721,722,1,0,0,0,722,
  	729,3,193,96,0,723,725,5,39,0,0,724,723,1,0,0,0,724,725,1,0,0,0,725,726,
  	1,0,0,0,726,728,3,193,96,0,727,724,1,0,0,0,728,731,1,0,0,0,729,727,1,
  	0,0,0,729,730,1,0,0,0,730,186,1,0,0,0,731,729,1,0,0,0,732,733,7,3,0,0,
  	733,188,1,0,0,0,734,735,7,4,0,0,735,190,1,0,0,0,736,737,7,5,0,0,737,192,
  	1,0,0,0,738,739,7,6,0,0,739,194,1,0,0,0,740,742,3,197,98,0,741,743,3,
  	199,99,0,742,741,1,0,0,0,742,743,1,0,0,0,743,757,1,0,0,0,744,746,3,197,
  	98,0,745,747,3,201,100,0,746,745,1,0,0,0,746,747,1,0,0,0,747,757,1,0,
  	0,0,748,750,3,199,99,0,749,751,3,197,98,0,750,749,1,0,0,0,750,751,1,0,
  	0,0,751,757,1,0,0,0,752,754,3,201,100,0,753,755,3,197,98,0,754,753,1,
  	0,0,0,754,755,1,0,0,0,755,757,1,0,0,0,756,740,1,0,0,0,756,744,1,0,0,0,
  	756,748,1,0,0,0,756,752,1,0,0,0,757,196,1,0,0,0,758,759,7,7,0,0,759,198,
  	1,0,0,0,760,761,7,8,0,0,761,200,1,0,0,0,762,763,5,108,0,0,763,767,5,108,
  	0,0,764,765,5,76,0,0,765,767,5,76,0,0,766,762,1,0,0,0,766,764,1,0,0,0,
  	767,202,1,0,0,0,768,772,8,9,0,0,769,772,3,205,102,0,770,772,3,169,84,
  	0,771,768,1,0,0,0,771,769,1,0,0,0,771,770,1,0,0,0,772,204,1,0,0,0,773,
  	777,3,207,103,0,774,777,3,209,104,0,775,777,3,211,105,0,776,773,1,0,0,
  	0,776,774,1,0,0,0,776,775,1,0,0,0,777,206,1,0,0,0,778,779,5,92,0,0,779,
  	809,5,39,0,0,780,781,5,92,0,0,781,809,5,34,0,0,782,783,5,92,0,0,783,809,
  	5,63,0,0,784,785,5,92,0,0,785,809,5,92,0,0,786,787,5,92,0,0,787,809,5,
  	97,0,0,788,789,5,92,0,0,789,809,5,98,0,0,790,791,5,92,0,0,791,809,5,102,
  	0,0,792,793,5,92,0,0,793,809,5,110,0,0,794,795,5,92,0,0,795,809,5,114,
  	0,0,796,802,5,92,0,0,797,799,5,13,0,0,798,800,5,10,0,0,799,798,1,0,0,
  	0,799,800,1,0,0,0,800,803,1,0,0,0,801,803,5,10,0,0,802,797,1,0,0,0,802,
  	801,1,0,0,0,803,809,1,0,0,0,804,805,5,92,0,0,805,809,5,116,0,0,806,807,
  	5,92,0,0,807,809,5,118,0,0,808,778,1,0,0,0,808,780,1,0,0,0,808,782,1,
  	0,0,0,808,784,1,0,0,0,808,786,1,0,0,0,808,788,1,0,0,0,808,790,1,0,0,0,
  	808,792,1,0,0,0,808,794,1,0,0,0,808,796,1,0,0,0,808,804,1,0,0,0,808,806,
  	1,0,0,0,809,208,1,0,0,0,810,811,5,92,0,0,811,822,3,189,94,0,812,813,5,
  	92,0,0,813,814,3,189,94,0,814,815,3,189,94,0,815,822,1,0,0,0,816,817,
  	5,92,0,0,817,818,3,189,94,0,818,819,3,189,94,0,819,820,3,189,94,0,820,
  	822,1,0,0,0,821,810,1,0,0,0,821,812,1,0,0,0,821,816,1,0,0,0,822,210,1,
  	0,0,0,823,824,5,92,0,0,824,825,5,120,0,0,825,827,1,0,0,0,826,828,3,191,
  	95,0,827,826,1,0,0,0,828,829,1,0,0,0,829,827,1,0,0,0,829,830,1,0,0,0,
  	830,212,1,0,0,0,831,833,3,219,109,0,832,831,1,0,0,0,832,833,1,0,0,0,833,
  	834,1,0,0,0,834,835,5,46,0,0,835,840,3,219,109,0,836,837,3,219,109,0,
  	837,838,5,46,0,0,838,840,1,0,0,0,839,832,1,0,0,0,839,836,1,0,0,0,840,
  	214,1,0,0,0,841,843,5,101,0,0,842,844,3,217,108,0,843,842,1,0,0,0,843,
  	844,1,0,0,0,844,845,1,0,0,0,845,852,3,219,109,0,846,848,5,69,0,0,847,
  	849,3,217,108,0,848,847,1,0,0,0,848,849,1,0,0,0,849,850,1,0,0,0,850,852,
  	3,219,109,0,851,841,1,0,0,0,851,846,1,0,0,0,852,216,1,0,0,0,853,854,7,
  	10,0,0,854,218,1,0,0,0,855,862,3,177,88,0,856,858,5,39,0,0,857,856,1,
  	0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,861,3,177,88,0,860,857,1,0,
  	0,0,861,864,1,0,0,0,862,860,1,0,0,0,862,863,1,0,0,0,863,220,1,0,0,0,864,
  	862,1,0,0,0,865,866,7,11,0,0,866,222,1,0,0,0,867,868,5,117,0,0,868,871,
  	5,56,0,0,869,871,7,0,0,0,870,867,1,0,0,0,870,869,1,0,0,0,871,224,1,0,
  	0,0,872,876,8,12,0,0,873,876,3,205,102,0,874,876,3,169,84,0,875,872,1,
  	0,0,0,875,873,1,0,0,0,875,874,1,0,0,0,876,226,1,0,0,0,877,878,5,82,0,
  	0,878,879,5,34,0,0,879,885,1,0,0,0,880,881,5,92,0,0,881,884,7,13,0,0,
  	882,884,8,14,0,0,883,880,1,0,0,0,883,882,1,0,0,0,884,887,1,0,0,0,885,
  	886,1,0,0,0,885,883,1,0,0,0,886,888,1,0,0,0,887,885,1,0,0,0,888,892,5,
  	40,0,0,889,891,8,15,0,0,890,889,1,0,0,0,891,894,1,0,0,0,892,893,1,0,0,
  	0,892,890,1,0,0,0,893,895,1,0,0,0,894,892,1,0,0,0,895,901,5,41,0,0,896,
  	897,5,92,0,0,897,900,7,13,0,0,898,900,8,16,0,0,899,896,1,0,0,0,899,898,
  	1,0,0,0,900,903,1,0,0,0,901,902,1,0,0,0,901,899,1,0,0,0,902,904,1,0,0,
  	0,903,901,1,0,0,0,904,905,5,34,0,0,905,228,1,0,0,0,906,907,3,179,89,0,
  	907,908,3,237,118,0,908,919,1,0,0,0,909,910,3,181,90,0,910,911,3,237,
  	118,0,911,919,1,0,0,0,912,913,3,183,91,0,913,914,3,237,118,0,914,919,
  	1,0,0,0,915,916,3,185,92,0,916,917,3,237,118,0,917,919,1,0,0,0,918,906,
  	1,0,0,0,918,909,1,0,0,0,918,912,1,0,0,0,918,915,1,0,0,0,919,230,1,0,0,
  	0,920,922,3,213,106,0,921,923,3,215,107,0,922,921,1,0,0,0,922,923,1,0,
  	0,0,923,924,1,0,0,0,924,925,3,237,118,0,925,931,1,0,0,0,926,927,3,219,
  	109,0,927,928,3,215,107,0,928,929,3,237,118,0,929,931,1,0,0,0,930,920,
  	1,0,0,0,930,926,1,0,0,0,931,232,1,0,0,0,932,933,3,7,3,0,933,934,3,237,
  	118,0,934,234,1,0,0,0,935,936,3,3,1,0,936,937,3,237,118,0,937,236,1,0,
  	0,0,938,939,3,171,85,0,939,238,1,0,0,0,940,942,7,17,0,0,941,940,1,0,0,
  	0,942,943,1,0,0,0,943,941,1,0,0,0,943,944,1,0,0,0,944,945,1,0,0,0,945,
  	946,6,119,0,0,946,240,1,0,0,0,947,949,5,13,0,0,948,950,5,10,0,0,949,948,
  	1,0,0,0,949,950,1,0,0,0,950,953,1,0,0,0,951,953,5,10,0,0,952,947,1,0,
  	0,0,952,951,1,0,0,0,953,954,1,0,0,0,954,955,6,120,0,0,955,242,1,0,0,0,
  	956,957,5,35,0,0,957,958,5,33,0,0,958,960,1,0,0,0,959,961,9,0,0,0,960,
  	959,1,0,0,0,960,961,1,0,0,0,961,962,1,0,0,0,962,963,5,33,0,0,963,964,
  	5,35,0,0,964,965,1,0,0,0,965,966,6,121,0,0,966,244,1,0,0,0,967,968,5,
  	35,0,0,968,969,8,18,0,0,969,970,1,0,0,0,970,971,6,122,0,0,971,246,1,0,
  	0,0,70,0,249,253,257,261,263,266,272,278,281,286,288,291,298,302,306,
  	314,553,559,571,605,611,662,667,669,674,682,687,692,697,704,708,713,720,
  	724,729,742,746,750,754,756,766,771,776,799,802,808,821,829,832,839,843,
  	848,851,857,862,870,875,883,885,892,899,901,918,922,930,943,949,952,960,
  	1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  autotenv1lexerLexerStaticData = staticData.release();
}

}

AutoTenV1Lexer::AutoTenV1Lexer(CharStream *input) : Lexer(input) {
  AutoTenV1Lexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *autotenv1lexerLexerStaticData->atn, autotenv1lexerLexerStaticData->decisionToDFA, autotenv1lexerLexerStaticData->sharedContextCache);
}

AutoTenV1Lexer::~AutoTenV1Lexer() {
  delete _interpreter;
}

std::string AutoTenV1Lexer::getGrammarFileName() const {
  return "AutoTenV1Lexer.g4";
}

const std::vector<std::string>& AutoTenV1Lexer::getRuleNames() const {
  return autotenv1lexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& AutoTenV1Lexer::getChannelNames() const {
  return autotenv1lexerLexerStaticData->channelNames;
}

const std::vector<std::string>& AutoTenV1Lexer::getModeNames() const {
  return autotenv1lexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& AutoTenV1Lexer::getVocabulary() const {
  return autotenv1lexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView AutoTenV1Lexer::getSerializedATN() const {
  return autotenv1lexerLexerStaticData->serializedATN;
}

const atn::ATN& AutoTenV1Lexer::getATN() const {
  return *autotenv1lexerLexerStaticData->atn;
}




void AutoTenV1Lexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  autotenv1lexerLexerInitialize();
#else
  ::antlr4::internal::call_once(autotenv1lexerLexerOnceFlag, autotenv1lexerLexerInitialize);
#endif
}
