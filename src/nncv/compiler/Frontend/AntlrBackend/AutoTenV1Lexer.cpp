
// Generated from ./AutoTenV1Lexer.g4 by ANTLR 4.13.0


#include "AutoTenV1Lexer.h"


using namespace antlr4;

using namespace antlrcpp;


using namespace antlr4;

namespace {

struct AutoTenV1LexerStaticData final {
  AutoTenV1LexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  AutoTenV1LexerStaticData(const AutoTenV1LexerStaticData&) = delete;
  AutoTenV1LexerStaticData(AutoTenV1LexerStaticData&&) = delete;
  AutoTenV1LexerStaticData& operator=(const AutoTenV1LexerStaticData&) = delete;
  AutoTenV1LexerStaticData& operator=(AutoTenV1LexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag autotenv1lexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
AutoTenV1LexerStaticData *autotenv1lexerLexerStaticData = nullptr;

void autotenv1lexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (autotenv1lexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(autotenv1lexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<AutoTenV1LexerStaticData>(
    std::vector<std::string>{
      "IntegerLiteral", "CharacterLiteral", "FloatingLiteral", "StringLiteral", 
      "BooleanLiteral", "PointerLiteral", "UserDefinedLiteral", "Int8", 
      "Int16", "Int32", "Int64", "Float32", "Float64", "Char", "Bool", "String", 
      "Tensor", "Var", "False_", "True_", "Void", "Nilptr", "Break", "Continue", 
      "Goto", "Fallthrough", "If", "While", "For", "Pfor", "Else", "Do", 
      "Switch", "Case", "Default", "Function", "Return", "Struct", "Type", 
      "Package", "Impl", "Public", "Sizeof", "LeftParen", "RightParen", 
      "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Plus", 
      "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", "Tilde", "Not", 
      "Assign", "DeclareAssign", "Less", "Greater", "LeftShift", "RightShift", 
      "NotEqual", "Equal", "LessEqual", "GreaterEqual", "AndAnd", "OrOr", 
      "PlusPlus", "MinusMinus", "Comma", "ArrowReturnType", "Colon", "Dot", 
      "DotStar", "ArrowStar", "At", "Semi", "Map", "Ellipsis", "Import", 
      "Hexquad", "Universalcharactername", "Identifier", "Identifiernondigit", 
      "NONDIGIT", "DIGIT", "DecimalLiteral", "OctalLiteral", "HexadecimalLiteral", 
      "BinaryLiteral", "NONZERODIGIT", "OCTALDIGIT", "HEXADECIMALDIGIT", 
      "BINARYDIGIT", "Integersuffix", "Unsignedsuffix", "Longsuffix", "Longlongsuffix", 
      "Cchar", "Escapesequence", "Simpleescapesequence", "Octalescapesequence", 
      "Hexadecimalescapesequence", "Fractionalconstant", "Exponentpart", 
      "SIGN", "Digitsequence", "Floatingsuffix", "Encodingprefix", "Schar", 
      "Rawstring", "UserDefinedIntegerLiteral", "UserDefinedFloatingLiteral", 
      "UserDefinedStringLiteral", "UserDefinedCharacterLiteral", "Udsuffix", 
      "Whitespace", "Newline", "BlockComment", "LineComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "'int8'", "'int16'", "'int32'", "'int64'", 
      "'float32'", "'float64'", "'char'", "'bool'", "'string'", "'Tensor'", 
      "'var'", "'false'", "'true'", "'void'", "'nil'", "'break'", "'continue'", 
      "'goto'", "'fallthrough'", "'if'", "'while'", "'for'", "'pfor'", "'else'", 
      "'do'", "'switch'", "'case'", "'default'", "'func'", "'return'", "'struct'", 
      "'type'", "'package'", "'impl'", "'pub'", "'sizeof'", "'('", "')'", 
      "'['", "']'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "", "", "'&'", 
      "'|'", "'~'", "", "'='", "':='", "'<'", "'>'", "'<<'", "'>>'", "'!='", 
      "'=='", "'<='", "'>='", "", "", "'++'", "'--'", "','", "'->'", "':'", 
      "'.'", "'.*'", "'->*'", "'@'", "';'", "'map'", "'...'", "'import'"
    },
    std::vector<std::string>{
      "", "IntegerLiteral", "CharacterLiteral", "FloatingLiteral", "StringLiteral", 
      "BooleanLiteral", "PointerLiteral", "UserDefinedLiteral", "Int8", 
      "Int16", "Int32", "Int64", "Float32", "Float64", "Char", "Bool", "String", 
      "Tensor", "Var", "False_", "True_", "Void", "Nilptr", "Break", "Continue", 
      "Goto", "Fallthrough", "If", "While", "For", "Pfor", "Else", "Do", 
      "Switch", "Case", "Default", "Function", "Return", "Struct", "Type", 
      "Package", "Impl", "Public", "Sizeof", "LeftParen", "RightParen", 
      "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Plus", 
      "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", "Tilde", "Not", 
      "Assign", "DeclareAssign", "Less", "Greater", "LeftShift", "RightShift", 
      "NotEqual", "Equal", "LessEqual", "GreaterEqual", "AndAnd", "OrOr", 
      "PlusPlus", "MinusMinus", "Comma", "ArrowReturnType", "Colon", "Dot", 
      "DotStar", "ArrowStar", "At", "Semi", "Map", "Ellipsis", "Import", 
      "Identifier", "DecimalLiteral", "OctalLiteral", "HexadecimalLiteral", 
      "BinaryLiteral", "Integersuffix", "UserDefinedIntegerLiteral", "UserDefinedFloatingLiteral", 
      "UserDefinedStringLiteral", "UserDefinedCharacterLiteral", "Whitespace", 
      "Newline", "BlockComment", "LineComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,98,990,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,1,0,1,0,3,0,252,8,0,1,0,1,0,3,0,256,8,0,1,0,1,0,3,0,
  	260,8,0,1,0,1,0,3,0,264,8,0,3,0,266,8,0,1,1,3,1,269,8,1,1,1,1,1,4,1,273,
  	8,1,11,1,12,1,274,1,1,1,1,1,2,1,2,3,2,281,8,2,1,2,3,2,284,8,2,1,2,1,2,
  	1,2,3,2,289,8,2,3,2,291,8,2,1,3,3,3,294,8,3,1,3,1,3,1,3,5,3,299,8,3,10,
  	3,12,3,302,9,3,1,3,3,3,305,8,3,1,4,1,4,3,4,309,8,4,1,5,1,5,1,6,1,6,1,
  	6,1,6,3,6,317,8,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
  	1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
  	1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
  	1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
  	1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
  	1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,
  	1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
  	1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,
  	1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,
  	1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
  	1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,
  	1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,
  	1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,53,1,53,3,53,
  	556,8,53,1,54,1,54,1,54,1,54,3,54,562,8,54,1,55,1,55,1,56,1,56,1,57,1,
  	57,1,58,1,58,1,58,1,58,3,58,574,8,58,1,59,1,59,1,60,1,60,1,60,1,61,1,
  	61,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,
  	66,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,3,69,608,8,
  	69,1,70,1,70,1,70,1,70,3,70,614,8,70,1,71,1,71,1,71,1,72,1,72,1,72,1,
  	73,1,73,1,74,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,
  	78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,
  	83,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,
  	85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,672,8,85,1,86,1,86,1,86,5,
  	86,677,8,86,10,86,12,86,680,9,86,1,87,1,87,3,87,684,8,87,1,88,1,88,1,
  	89,1,89,1,90,1,90,3,90,692,8,90,1,90,5,90,695,8,90,10,90,12,90,698,9,
  	90,1,91,1,91,3,91,702,8,91,1,91,5,91,705,8,91,10,91,12,91,708,9,91,1,
  	92,1,92,1,92,1,92,3,92,714,8,92,1,92,1,92,3,92,718,8,92,1,92,5,92,721,
  	8,92,10,92,12,92,724,9,92,1,93,1,93,1,93,1,93,3,93,730,8,93,1,93,1,93,
  	3,93,734,8,93,1,93,5,93,737,8,93,10,93,12,93,740,9,93,1,94,1,94,1,95,
  	1,95,1,96,1,96,1,97,1,97,1,98,1,98,3,98,752,8,98,1,98,1,98,3,98,756,8,
  	98,1,98,1,98,3,98,760,8,98,1,98,1,98,3,98,764,8,98,3,98,766,8,98,1,99,
  	1,99,1,100,1,100,1,101,1,101,1,101,1,101,3,101,776,8,101,1,102,1,102,
  	1,102,3,102,781,8,102,1,103,1,103,1,103,3,103,786,8,103,1,104,1,104,1,
  	104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
  	1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,809,8,104,1,104,3,104,
  	812,8,104,1,104,1,104,1,104,1,104,3,104,818,8,104,1,105,1,105,1,105,1,
  	105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,831,8,105,1,106,1,
  	106,1,106,1,106,4,106,837,8,106,11,106,12,106,838,1,107,3,107,842,8,107,
  	1,107,1,107,1,107,1,107,1,107,3,107,849,8,107,1,108,1,108,3,108,853,8,
  	108,1,108,1,108,1,108,3,108,858,8,108,1,108,3,108,861,8,108,1,109,1,109,
  	1,110,1,110,3,110,867,8,110,1,110,5,110,870,8,110,10,110,12,110,873,9,
  	110,1,111,1,111,1,112,1,112,1,112,3,112,880,8,112,1,113,1,113,1,113,3,
  	113,885,8,113,1,114,1,114,1,114,1,114,1,114,1,114,5,114,893,8,114,10,
  	114,12,114,896,9,114,1,114,1,114,5,114,900,8,114,10,114,12,114,903,9,
  	114,1,114,1,114,1,114,1,114,5,114,909,8,114,10,114,12,114,912,9,114,1,
  	114,1,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
  	1,115,1,115,3,115,928,8,115,1,116,1,116,3,116,932,8,116,1,116,1,116,1,
  	116,1,116,1,116,1,116,3,116,940,8,116,1,117,1,117,1,117,1,118,1,118,1,
  	118,1,119,1,119,1,120,4,120,951,8,120,11,120,12,120,952,1,120,1,120,1,
  	121,1,121,3,121,959,8,121,1,121,3,121,962,8,121,1,121,1,121,1,122,1,122,
  	1,122,1,122,5,122,970,8,122,10,122,12,122,973,9,122,1,122,1,122,1,122,
  	1,122,1,122,1,123,1,123,1,123,1,123,5,123,984,8,123,10,123,12,123,987,
  	9,123,1,123,1,123,4,894,901,910,971,0,124,1,1,3,2,5,3,7,4,9,5,11,6,13,
  	7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
  	19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
  	61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
  	42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,
  	53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,
  	63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,
  	73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,165,
  	83,167,84,169,0,171,0,173,85,175,0,177,0,179,0,181,86,183,87,185,88,187,
  	89,189,0,191,0,193,0,195,0,197,90,199,0,201,0,203,0,205,0,207,0,209,0,
  	211,0,213,0,215,0,217,0,219,0,221,0,223,0,225,0,227,0,229,0,231,91,233,
  	92,235,93,237,94,239,0,241,95,243,96,245,97,247,98,1,0,19,3,0,76,76,85,
  	85,117,117,3,0,65,90,95,95,97,122,1,0,48,57,1,0,49,57,1,0,48,55,3,0,48,
  	57,65,70,97,102,1,0,48,49,2,0,85,85,117,117,2,0,76,76,108,108,4,0,10,
  	10,13,13,39,39,92,92,2,0,43,43,45,45,4,0,70,70,76,76,102,102,108,108,
  	4,0,10,10,13,13,34,34,92,92,2,0,34,34,40,41,4,0,10,10,13,13,32,32,40,
  	40,1,0,41,41,4,0,10,10,13,13,32,32,34,34,2,0,9,9,32,32,2,0,10,10,13,13,
  	1055,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
  	1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
  	0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
  	0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
  	1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
  	0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
  	0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
  	1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
  	0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,
  	0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,
  	107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,
  	117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,
  	127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,
  	137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,
  	147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,
  	157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,
  	167,1,0,0,0,0,173,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,0,
  	187,1,0,0,0,0,197,1,0,0,0,0,231,1,0,0,0,0,233,1,0,0,0,0,235,1,0,0,0,0,
  	237,1,0,0,0,0,241,1,0,0,0,0,243,1,0,0,0,0,245,1,0,0,0,0,247,1,0,0,0,1,
  	265,1,0,0,0,3,268,1,0,0,0,5,290,1,0,0,0,7,293,1,0,0,0,9,308,1,0,0,0,11,
  	310,1,0,0,0,13,316,1,0,0,0,15,318,1,0,0,0,17,323,1,0,0,0,19,329,1,0,0,
  	0,21,335,1,0,0,0,23,341,1,0,0,0,25,349,1,0,0,0,27,357,1,0,0,0,29,362,
  	1,0,0,0,31,367,1,0,0,0,33,374,1,0,0,0,35,381,1,0,0,0,37,385,1,0,0,0,39,
  	391,1,0,0,0,41,396,1,0,0,0,43,401,1,0,0,0,45,405,1,0,0,0,47,411,1,0,0,
  	0,49,420,1,0,0,0,51,425,1,0,0,0,53,437,1,0,0,0,55,440,1,0,0,0,57,446,
  	1,0,0,0,59,450,1,0,0,0,61,455,1,0,0,0,63,460,1,0,0,0,65,463,1,0,0,0,67,
  	470,1,0,0,0,69,475,1,0,0,0,71,483,1,0,0,0,73,488,1,0,0,0,75,495,1,0,0,
  	0,77,502,1,0,0,0,79,507,1,0,0,0,81,515,1,0,0,0,83,520,1,0,0,0,85,524,
  	1,0,0,0,87,531,1,0,0,0,89,533,1,0,0,0,91,535,1,0,0,0,93,537,1,0,0,0,95,
  	539,1,0,0,0,97,541,1,0,0,0,99,543,1,0,0,0,101,545,1,0,0,0,103,547,1,0,
  	0,0,105,549,1,0,0,0,107,555,1,0,0,0,109,561,1,0,0,0,111,563,1,0,0,0,113,
  	565,1,0,0,0,115,567,1,0,0,0,117,573,1,0,0,0,119,575,1,0,0,0,121,577,1,
  	0,0,0,123,580,1,0,0,0,125,582,1,0,0,0,127,584,1,0,0,0,129,587,1,0,0,0,
  	131,590,1,0,0,0,133,593,1,0,0,0,135,596,1,0,0,0,137,599,1,0,0,0,139,607,
  	1,0,0,0,141,613,1,0,0,0,143,615,1,0,0,0,145,618,1,0,0,0,147,621,1,0,0,
  	0,149,623,1,0,0,0,151,626,1,0,0,0,153,628,1,0,0,0,155,630,1,0,0,0,157,
  	633,1,0,0,0,159,637,1,0,0,0,161,639,1,0,0,0,163,641,1,0,0,0,165,645,1,
  	0,0,0,167,649,1,0,0,0,169,656,1,0,0,0,171,671,1,0,0,0,173,673,1,0,0,0,
  	175,683,1,0,0,0,177,685,1,0,0,0,179,687,1,0,0,0,181,689,1,0,0,0,183,699,
  	1,0,0,0,185,713,1,0,0,0,187,729,1,0,0,0,189,741,1,0,0,0,191,743,1,0,0,
  	0,193,745,1,0,0,0,195,747,1,0,0,0,197,765,1,0,0,0,199,767,1,0,0,0,201,
  	769,1,0,0,0,203,775,1,0,0,0,205,780,1,0,0,0,207,785,1,0,0,0,209,817,1,
  	0,0,0,211,830,1,0,0,0,213,832,1,0,0,0,215,848,1,0,0,0,217,860,1,0,0,0,
  	219,862,1,0,0,0,221,864,1,0,0,0,223,874,1,0,0,0,225,879,1,0,0,0,227,884,
  	1,0,0,0,229,886,1,0,0,0,231,927,1,0,0,0,233,939,1,0,0,0,235,941,1,0,0,
  	0,237,944,1,0,0,0,239,947,1,0,0,0,241,950,1,0,0,0,243,961,1,0,0,0,245,
  	965,1,0,0,0,247,979,1,0,0,0,249,251,3,181,90,0,250,252,3,197,98,0,251,
  	250,1,0,0,0,251,252,1,0,0,0,252,266,1,0,0,0,253,255,3,183,91,0,254,256,
  	3,197,98,0,255,254,1,0,0,0,255,256,1,0,0,0,256,266,1,0,0,0,257,259,3,
  	185,92,0,258,260,3,197,98,0,259,258,1,0,0,0,259,260,1,0,0,0,260,266,1,
  	0,0,0,261,263,3,187,93,0,262,264,3,197,98,0,263,262,1,0,0,0,263,264,1,
  	0,0,0,264,266,1,0,0,0,265,249,1,0,0,0,265,253,1,0,0,0,265,257,1,0,0,0,
  	265,261,1,0,0,0,266,2,1,0,0,0,267,269,7,0,0,0,268,267,1,0,0,0,268,269,
  	1,0,0,0,269,270,1,0,0,0,270,272,5,39,0,0,271,273,3,205,102,0,272,271,
  	1,0,0,0,273,274,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,276,1,0,0,
  	0,276,277,5,39,0,0,277,4,1,0,0,0,278,280,3,215,107,0,279,281,3,217,108,
  	0,280,279,1,0,0,0,280,281,1,0,0,0,281,283,1,0,0,0,282,284,3,223,111,0,
  	283,282,1,0,0,0,283,284,1,0,0,0,284,291,1,0,0,0,285,286,3,221,110,0,286,
  	288,3,217,108,0,287,289,3,223,111,0,288,287,1,0,0,0,288,289,1,0,0,0,289,
  	291,1,0,0,0,290,278,1,0,0,0,290,285,1,0,0,0,291,6,1,0,0,0,292,294,3,225,
  	112,0,293,292,1,0,0,0,293,294,1,0,0,0,294,304,1,0,0,0,295,305,3,229,114,
  	0,296,300,5,34,0,0,297,299,3,227,113,0,298,297,1,0,0,0,299,302,1,0,0,
  	0,300,298,1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,0,302,300,1,0,0,0,303,
  	305,5,34,0,0,304,295,1,0,0,0,304,296,1,0,0,0,305,8,1,0,0,0,306,309,3,
  	37,18,0,307,309,3,39,19,0,308,306,1,0,0,0,308,307,1,0,0,0,309,10,1,0,
  	0,0,310,311,3,43,21,0,311,12,1,0,0,0,312,317,3,231,115,0,313,317,3,233,
  	116,0,314,317,3,235,117,0,315,317,3,237,118,0,316,312,1,0,0,0,316,313,
  	1,0,0,0,316,314,1,0,0,0,316,315,1,0,0,0,317,14,1,0,0,0,318,319,5,105,
  	0,0,319,320,5,110,0,0,320,321,5,116,0,0,321,322,5,56,0,0,322,16,1,0,0,
  	0,323,324,5,105,0,0,324,325,5,110,0,0,325,326,5,116,0,0,326,327,5,49,
  	0,0,327,328,5,54,0,0,328,18,1,0,0,0,329,330,5,105,0,0,330,331,5,110,0,
  	0,331,332,5,116,0,0,332,333,5,51,0,0,333,334,5,50,0,0,334,20,1,0,0,0,
  	335,336,5,105,0,0,336,337,5,110,0,0,337,338,5,116,0,0,338,339,5,54,0,
  	0,339,340,5,52,0,0,340,22,1,0,0,0,341,342,5,102,0,0,342,343,5,108,0,0,
  	343,344,5,111,0,0,344,345,5,97,0,0,345,346,5,116,0,0,346,347,5,51,0,0,
  	347,348,5,50,0,0,348,24,1,0,0,0,349,350,5,102,0,0,350,351,5,108,0,0,351,
  	352,5,111,0,0,352,353,5,97,0,0,353,354,5,116,0,0,354,355,5,54,0,0,355,
  	356,5,52,0,0,356,26,1,0,0,0,357,358,5,99,0,0,358,359,5,104,0,0,359,360,
  	5,97,0,0,360,361,5,114,0,0,361,28,1,0,0,0,362,363,5,98,0,0,363,364,5,
  	111,0,0,364,365,5,111,0,0,365,366,5,108,0,0,366,30,1,0,0,0,367,368,5,
  	115,0,0,368,369,5,116,0,0,369,370,5,114,0,0,370,371,5,105,0,0,371,372,
  	5,110,0,0,372,373,5,103,0,0,373,32,1,0,0,0,374,375,5,84,0,0,375,376,5,
  	101,0,0,376,377,5,110,0,0,377,378,5,115,0,0,378,379,5,111,0,0,379,380,
  	5,114,0,0,380,34,1,0,0,0,381,382,5,118,0,0,382,383,5,97,0,0,383,384,5,
  	114,0,0,384,36,1,0,0,0,385,386,5,102,0,0,386,387,5,97,0,0,387,388,5,108,
  	0,0,388,389,5,115,0,0,389,390,5,101,0,0,390,38,1,0,0,0,391,392,5,116,
  	0,0,392,393,5,114,0,0,393,394,5,117,0,0,394,395,5,101,0,0,395,40,1,0,
  	0,0,396,397,5,118,0,0,397,398,5,111,0,0,398,399,5,105,0,0,399,400,5,100,
  	0,0,400,42,1,0,0,0,401,402,5,110,0,0,402,403,5,105,0,0,403,404,5,108,
  	0,0,404,44,1,0,0,0,405,406,5,98,0,0,406,407,5,114,0,0,407,408,5,101,0,
  	0,408,409,5,97,0,0,409,410,5,107,0,0,410,46,1,0,0,0,411,412,5,99,0,0,
  	412,413,5,111,0,0,413,414,5,110,0,0,414,415,5,116,0,0,415,416,5,105,0,
  	0,416,417,5,110,0,0,417,418,5,117,0,0,418,419,5,101,0,0,419,48,1,0,0,
  	0,420,421,5,103,0,0,421,422,5,111,0,0,422,423,5,116,0,0,423,424,5,111,
  	0,0,424,50,1,0,0,0,425,426,5,102,0,0,426,427,5,97,0,0,427,428,5,108,0,
  	0,428,429,5,108,0,0,429,430,5,116,0,0,430,431,5,104,0,0,431,432,5,114,
  	0,0,432,433,5,111,0,0,433,434,5,117,0,0,434,435,5,103,0,0,435,436,5,104,
  	0,0,436,52,1,0,0,0,437,438,5,105,0,0,438,439,5,102,0,0,439,54,1,0,0,0,
  	440,441,5,119,0,0,441,442,5,104,0,0,442,443,5,105,0,0,443,444,5,108,0,
  	0,444,445,5,101,0,0,445,56,1,0,0,0,446,447,5,102,0,0,447,448,5,111,0,
  	0,448,449,5,114,0,0,449,58,1,0,0,0,450,451,5,112,0,0,451,452,5,102,0,
  	0,452,453,5,111,0,0,453,454,5,114,0,0,454,60,1,0,0,0,455,456,5,101,0,
  	0,456,457,5,108,0,0,457,458,5,115,0,0,458,459,5,101,0,0,459,62,1,0,0,
  	0,460,461,5,100,0,0,461,462,5,111,0,0,462,64,1,0,0,0,463,464,5,115,0,
  	0,464,465,5,119,0,0,465,466,5,105,0,0,466,467,5,116,0,0,467,468,5,99,
  	0,0,468,469,5,104,0,0,469,66,1,0,0,0,470,471,5,99,0,0,471,472,5,97,0,
  	0,472,473,5,115,0,0,473,474,5,101,0,0,474,68,1,0,0,0,475,476,5,100,0,
  	0,476,477,5,101,0,0,477,478,5,102,0,0,478,479,5,97,0,0,479,480,5,117,
  	0,0,480,481,5,108,0,0,481,482,5,116,0,0,482,70,1,0,0,0,483,484,5,102,
  	0,0,484,485,5,117,0,0,485,486,5,110,0,0,486,487,5,99,0,0,487,72,1,0,0,
  	0,488,489,5,114,0,0,489,490,5,101,0,0,490,491,5,116,0,0,491,492,5,117,
  	0,0,492,493,5,114,0,0,493,494,5,110,0,0,494,74,1,0,0,0,495,496,5,115,
  	0,0,496,497,5,116,0,0,497,498,5,114,0,0,498,499,5,117,0,0,499,500,5,99,
  	0,0,500,501,5,116,0,0,501,76,1,0,0,0,502,503,5,116,0,0,503,504,5,121,
  	0,0,504,505,5,112,0,0,505,506,5,101,0,0,506,78,1,0,0,0,507,508,5,112,
  	0,0,508,509,5,97,0,0,509,510,5,99,0,0,510,511,5,107,0,0,511,512,5,97,
  	0,0,512,513,5,103,0,0,513,514,5,101,0,0,514,80,1,0,0,0,515,516,5,105,
  	0,0,516,517,5,109,0,0,517,518,5,112,0,0,518,519,5,108,0,0,519,82,1,0,
  	0,0,520,521,5,112,0,0,521,522,5,117,0,0,522,523,5,98,0,0,523,84,1,0,0,
  	0,524,525,5,115,0,0,525,526,5,105,0,0,526,527,5,122,0,0,527,528,5,101,
  	0,0,528,529,5,111,0,0,529,530,5,102,0,0,530,86,1,0,0,0,531,532,5,40,0,
  	0,532,88,1,0,0,0,533,534,5,41,0,0,534,90,1,0,0,0,535,536,5,91,0,0,536,
  	92,1,0,0,0,537,538,5,93,0,0,538,94,1,0,0,0,539,540,5,123,0,0,540,96,1,
  	0,0,0,541,542,5,125,0,0,542,98,1,0,0,0,543,544,5,43,0,0,544,100,1,0,0,
  	0,545,546,5,45,0,0,546,102,1,0,0,0,547,548,5,42,0,0,548,104,1,0,0,0,549,
  	550,5,47,0,0,550,106,1,0,0,0,551,556,5,37,0,0,552,553,5,109,0,0,553,554,
  	5,111,0,0,554,556,5,100,0,0,555,551,1,0,0,0,555,552,1,0,0,0,556,108,1,
  	0,0,0,557,562,5,94,0,0,558,559,5,120,0,0,559,560,5,111,0,0,560,562,5,
  	114,0,0,561,557,1,0,0,0,561,558,1,0,0,0,562,110,1,0,0,0,563,564,5,38,
  	0,0,564,112,1,0,0,0,565,566,5,124,0,0,566,114,1,0,0,0,567,568,5,126,0,
  	0,568,116,1,0,0,0,569,574,5,33,0,0,570,571,5,110,0,0,571,572,5,111,0,
  	0,572,574,5,116,0,0,573,569,1,0,0,0,573,570,1,0,0,0,574,118,1,0,0,0,575,
  	576,5,61,0,0,576,120,1,0,0,0,577,578,5,58,0,0,578,579,5,61,0,0,579,122,
  	1,0,0,0,580,581,5,60,0,0,581,124,1,0,0,0,582,583,5,62,0,0,583,126,1,0,
  	0,0,584,585,5,60,0,0,585,586,5,60,0,0,586,128,1,0,0,0,587,588,5,62,0,
  	0,588,589,5,62,0,0,589,130,1,0,0,0,590,591,5,33,0,0,591,592,5,61,0,0,
  	592,132,1,0,0,0,593,594,5,61,0,0,594,595,5,61,0,0,595,134,1,0,0,0,596,
  	597,5,60,0,0,597,598,5,61,0,0,598,136,1,0,0,0,599,600,5,62,0,0,600,601,
  	5,61,0,0,601,138,1,0,0,0,602,603,5,38,0,0,603,608,5,38,0,0,604,605,5,
  	97,0,0,605,606,5,110,0,0,606,608,5,100,0,0,607,602,1,0,0,0,607,604,1,
  	0,0,0,608,140,1,0,0,0,609,610,5,124,0,0,610,614,5,124,0,0,611,612,5,111,
  	0,0,612,614,5,114,0,0,613,609,1,0,0,0,613,611,1,0,0,0,614,142,1,0,0,0,
  	615,616,5,43,0,0,616,617,5,43,0,0,617,144,1,0,0,0,618,619,5,45,0,0,619,
  	620,5,45,0,0,620,146,1,0,0,0,621,622,5,44,0,0,622,148,1,0,0,0,623,624,
  	5,45,0,0,624,625,5,62,0,0,625,150,1,0,0,0,626,627,5,58,0,0,627,152,1,
  	0,0,0,628,629,5,46,0,0,629,154,1,0,0,0,630,631,5,46,0,0,631,632,5,42,
  	0,0,632,156,1,0,0,0,633,634,5,45,0,0,634,635,5,62,0,0,635,636,5,42,0,
  	0,636,158,1,0,0,0,637,638,5,64,0,0,638,160,1,0,0,0,639,640,5,59,0,0,640,
  	162,1,0,0,0,641,642,5,109,0,0,642,643,5,97,0,0,643,644,5,112,0,0,644,
  	164,1,0,0,0,645,646,5,46,0,0,646,647,5,46,0,0,647,648,5,46,0,0,648,166,
  	1,0,0,0,649,650,5,105,0,0,650,651,5,109,0,0,651,652,5,112,0,0,652,653,
  	5,111,0,0,653,654,5,114,0,0,654,655,5,116,0,0,655,168,1,0,0,0,656,657,
  	3,193,96,0,657,658,3,193,96,0,658,659,3,193,96,0,659,660,3,193,96,0,660,
  	170,1,0,0,0,661,662,5,92,0,0,662,663,5,117,0,0,663,664,1,0,0,0,664,672,
  	3,169,84,0,665,666,5,92,0,0,666,667,5,85,0,0,667,668,1,0,0,0,668,669,
  	3,169,84,0,669,670,3,169,84,0,670,672,1,0,0,0,671,661,1,0,0,0,671,665,
  	1,0,0,0,672,172,1,0,0,0,673,678,3,175,87,0,674,677,3,175,87,0,675,677,
  	3,179,89,0,676,674,1,0,0,0,676,675,1,0,0,0,677,680,1,0,0,0,678,676,1,
  	0,0,0,678,679,1,0,0,0,679,174,1,0,0,0,680,678,1,0,0,0,681,684,3,177,88,
  	0,682,684,3,171,85,0,683,681,1,0,0,0,683,682,1,0,0,0,684,176,1,0,0,0,
  	685,686,7,1,0,0,686,178,1,0,0,0,687,688,7,2,0,0,688,180,1,0,0,0,689,696,
  	3,189,94,0,690,692,5,39,0,0,691,690,1,0,0,0,691,692,1,0,0,0,692,693,1,
  	0,0,0,693,695,3,179,89,0,694,691,1,0,0,0,695,698,1,0,0,0,696,694,1,0,
  	0,0,696,697,1,0,0,0,697,182,1,0,0,0,698,696,1,0,0,0,699,706,5,48,0,0,
  	700,702,5,39,0,0,701,700,1,0,0,0,701,702,1,0,0,0,702,703,1,0,0,0,703,
  	705,3,191,95,0,704,701,1,0,0,0,705,708,1,0,0,0,706,704,1,0,0,0,706,707,
  	1,0,0,0,707,184,1,0,0,0,708,706,1,0,0,0,709,710,5,48,0,0,710,714,5,120,
  	0,0,711,712,5,48,0,0,712,714,5,88,0,0,713,709,1,0,0,0,713,711,1,0,0,0,
  	714,715,1,0,0,0,715,722,3,193,96,0,716,718,5,39,0,0,717,716,1,0,0,0,717,
  	718,1,0,0,0,718,719,1,0,0,0,719,721,3,193,96,0,720,717,1,0,0,0,721,724,
  	1,0,0,0,722,720,1,0,0,0,722,723,1,0,0,0,723,186,1,0,0,0,724,722,1,0,0,
  	0,725,726,5,48,0,0,726,730,5,98,0,0,727,728,5,48,0,0,728,730,5,66,0,0,
  	729,725,1,0,0,0,729,727,1,0,0,0,730,731,1,0,0,0,731,738,3,195,97,0,732,
  	734,5,39,0,0,733,732,1,0,0,0,733,734,1,0,0,0,734,735,1,0,0,0,735,737,
  	3,195,97,0,736,733,1,0,0,0,737,740,1,0,0,0,738,736,1,0,0,0,738,739,1,
  	0,0,0,739,188,1,0,0,0,740,738,1,0,0,0,741,742,7,3,0,0,742,190,1,0,0,0,
  	743,744,7,4,0,0,744,192,1,0,0,0,745,746,7,5,0,0,746,194,1,0,0,0,747,748,
  	7,6,0,0,748,196,1,0,0,0,749,751,3,199,99,0,750,752,3,201,100,0,751,750,
  	1,0,0,0,751,752,1,0,0,0,752,766,1,0,0,0,753,755,3,199,99,0,754,756,3,
  	203,101,0,755,754,1,0,0,0,755,756,1,0,0,0,756,766,1,0,0,0,757,759,3,201,
  	100,0,758,760,3,199,99,0,759,758,1,0,0,0,759,760,1,0,0,0,760,766,1,0,
  	0,0,761,763,3,203,101,0,762,764,3,199,99,0,763,762,1,0,0,0,763,764,1,
  	0,0,0,764,766,1,0,0,0,765,749,1,0,0,0,765,753,1,0,0,0,765,757,1,0,0,0,
  	765,761,1,0,0,0,766,198,1,0,0,0,767,768,7,7,0,0,768,200,1,0,0,0,769,770,
  	7,8,0,0,770,202,1,0,0,0,771,772,5,108,0,0,772,776,5,108,0,0,773,774,5,
  	76,0,0,774,776,5,76,0,0,775,771,1,0,0,0,775,773,1,0,0,0,776,204,1,0,0,
  	0,777,781,8,9,0,0,778,781,3,207,103,0,779,781,3,171,85,0,780,777,1,0,
  	0,0,780,778,1,0,0,0,780,779,1,0,0,0,781,206,1,0,0,0,782,786,3,209,104,
  	0,783,786,3,211,105,0,784,786,3,213,106,0,785,782,1,0,0,0,785,783,1,0,
  	0,0,785,784,1,0,0,0,786,208,1,0,0,0,787,788,5,92,0,0,788,818,5,39,0,0,
  	789,790,5,92,0,0,790,818,5,34,0,0,791,792,5,92,0,0,792,818,5,63,0,0,793,
  	794,5,92,0,0,794,818,5,92,0,0,795,796,5,92,0,0,796,818,5,97,0,0,797,798,
  	5,92,0,0,798,818,5,98,0,0,799,800,5,92,0,0,800,818,5,102,0,0,801,802,
  	5,92,0,0,802,818,5,110,0,0,803,804,5,92,0,0,804,818,5,114,0,0,805,811,
  	5,92,0,0,806,808,5,13,0,0,807,809,5,10,0,0,808,807,1,0,0,0,808,809,1,
  	0,0,0,809,812,1,0,0,0,810,812,5,10,0,0,811,806,1,0,0,0,811,810,1,0,0,
  	0,812,818,1,0,0,0,813,814,5,92,0,0,814,818,5,116,0,0,815,816,5,92,0,0,
  	816,818,5,118,0,0,817,787,1,0,0,0,817,789,1,0,0,0,817,791,1,0,0,0,817,
  	793,1,0,0,0,817,795,1,0,0,0,817,797,1,0,0,0,817,799,1,0,0,0,817,801,1,
  	0,0,0,817,803,1,0,0,0,817,805,1,0,0,0,817,813,1,0,0,0,817,815,1,0,0,0,
  	818,210,1,0,0,0,819,820,5,92,0,0,820,831,3,191,95,0,821,822,5,92,0,0,
  	822,823,3,191,95,0,823,824,3,191,95,0,824,831,1,0,0,0,825,826,5,92,0,
  	0,826,827,3,191,95,0,827,828,3,191,95,0,828,829,3,191,95,0,829,831,1,
  	0,0,0,830,819,1,0,0,0,830,821,1,0,0,0,830,825,1,0,0,0,831,212,1,0,0,0,
  	832,833,5,92,0,0,833,834,5,120,0,0,834,836,1,0,0,0,835,837,3,193,96,0,
  	836,835,1,0,0,0,837,838,1,0,0,0,838,836,1,0,0,0,838,839,1,0,0,0,839,214,
  	1,0,0,0,840,842,3,221,110,0,841,840,1,0,0,0,841,842,1,0,0,0,842,843,1,
  	0,0,0,843,844,5,46,0,0,844,849,3,221,110,0,845,846,3,221,110,0,846,847,
  	5,46,0,0,847,849,1,0,0,0,848,841,1,0,0,0,848,845,1,0,0,0,849,216,1,0,
  	0,0,850,852,5,101,0,0,851,853,3,219,109,0,852,851,1,0,0,0,852,853,1,0,
  	0,0,853,854,1,0,0,0,854,861,3,221,110,0,855,857,5,69,0,0,856,858,3,219,
  	109,0,857,856,1,0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,861,3,221,110,
  	0,860,850,1,0,0,0,860,855,1,0,0,0,861,218,1,0,0,0,862,863,7,10,0,0,863,
  	220,1,0,0,0,864,871,3,179,89,0,865,867,5,39,0,0,866,865,1,0,0,0,866,867,
  	1,0,0,0,867,868,1,0,0,0,868,870,3,179,89,0,869,866,1,0,0,0,870,873,1,
  	0,0,0,871,869,1,0,0,0,871,872,1,0,0,0,872,222,1,0,0,0,873,871,1,0,0,0,
  	874,875,7,11,0,0,875,224,1,0,0,0,876,877,5,117,0,0,877,880,5,56,0,0,878,
  	880,7,0,0,0,879,876,1,0,0,0,879,878,1,0,0,0,880,226,1,0,0,0,881,885,8,
  	12,0,0,882,885,3,207,103,0,883,885,3,171,85,0,884,881,1,0,0,0,884,882,
  	1,0,0,0,884,883,1,0,0,0,885,228,1,0,0,0,886,887,5,82,0,0,887,888,5,34,
  	0,0,888,894,1,0,0,0,889,890,5,92,0,0,890,893,7,13,0,0,891,893,8,14,0,
  	0,892,889,1,0,0,0,892,891,1,0,0,0,893,896,1,0,0,0,894,895,1,0,0,0,894,
  	892,1,0,0,0,895,897,1,0,0,0,896,894,1,0,0,0,897,901,5,40,0,0,898,900,
  	8,15,0,0,899,898,1,0,0,0,900,903,1,0,0,0,901,902,1,0,0,0,901,899,1,0,
  	0,0,902,904,1,0,0,0,903,901,1,0,0,0,904,910,5,41,0,0,905,906,5,92,0,0,
  	906,909,7,13,0,0,907,909,8,16,0,0,908,905,1,0,0,0,908,907,1,0,0,0,909,
  	912,1,0,0,0,910,911,1,0,0,0,910,908,1,0,0,0,911,913,1,0,0,0,912,910,1,
  	0,0,0,913,914,5,34,0,0,914,230,1,0,0,0,915,916,3,181,90,0,916,917,3,239,
  	119,0,917,928,1,0,0,0,918,919,3,183,91,0,919,920,3,239,119,0,920,928,
  	1,0,0,0,921,922,3,185,92,0,922,923,3,239,119,0,923,928,1,0,0,0,924,925,
  	3,187,93,0,925,926,3,239,119,0,926,928,1,0,0,0,927,915,1,0,0,0,927,918,
  	1,0,0,0,927,921,1,0,0,0,927,924,1,0,0,0,928,232,1,0,0,0,929,931,3,215,
  	107,0,930,932,3,217,108,0,931,930,1,0,0,0,931,932,1,0,0,0,932,933,1,0,
  	0,0,933,934,3,239,119,0,934,940,1,0,0,0,935,936,3,221,110,0,936,937,3,
  	217,108,0,937,938,3,239,119,0,938,940,1,0,0,0,939,929,1,0,0,0,939,935,
  	1,0,0,0,940,234,1,0,0,0,941,942,3,7,3,0,942,943,3,239,119,0,943,236,1,
  	0,0,0,944,945,3,3,1,0,945,946,3,239,119,0,946,238,1,0,0,0,947,948,3,173,
  	86,0,948,240,1,0,0,0,949,951,7,17,0,0,950,949,1,0,0,0,951,952,1,0,0,0,
  	952,950,1,0,0,0,952,953,1,0,0,0,953,954,1,0,0,0,954,955,6,120,0,0,955,
  	242,1,0,0,0,956,958,5,13,0,0,957,959,5,10,0,0,958,957,1,0,0,0,958,959,
  	1,0,0,0,959,962,1,0,0,0,960,962,5,10,0,0,961,956,1,0,0,0,961,960,1,0,
  	0,0,962,963,1,0,0,0,963,964,6,121,0,0,964,244,1,0,0,0,965,966,5,47,0,
  	0,966,967,5,42,0,0,967,971,1,0,0,0,968,970,9,0,0,0,969,968,1,0,0,0,970,
  	973,1,0,0,0,971,972,1,0,0,0,971,969,1,0,0,0,972,974,1,0,0,0,973,971,1,
  	0,0,0,974,975,5,42,0,0,975,976,5,47,0,0,976,977,1,0,0,0,977,978,6,122,
  	0,0,978,246,1,0,0,0,979,980,5,47,0,0,980,981,5,47,0,0,981,985,1,0,0,0,
  	982,984,8,18,0,0,983,982,1,0,0,0,984,987,1,0,0,0,985,983,1,0,0,0,985,
  	986,1,0,0,0,986,988,1,0,0,0,987,985,1,0,0,0,988,989,6,123,0,0,989,248,
  	1,0,0,0,71,0,251,255,259,263,265,268,274,280,283,288,290,293,300,304,
  	308,316,555,561,573,607,613,671,676,678,683,691,696,701,706,713,717,722,
  	729,733,738,751,755,759,763,765,775,780,785,808,811,817,830,838,841,848,
  	852,857,860,866,871,879,884,892,894,901,908,910,927,931,939,952,958,961,
  	971,985,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  autotenv1lexerLexerStaticData = staticData.release();
}

}

AutoTenV1Lexer::AutoTenV1Lexer(CharStream *input) : Lexer(input) {
  AutoTenV1Lexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *autotenv1lexerLexerStaticData->atn, autotenv1lexerLexerStaticData->decisionToDFA, autotenv1lexerLexerStaticData->sharedContextCache);
}

AutoTenV1Lexer::~AutoTenV1Lexer() {
  delete _interpreter;
}

std::string AutoTenV1Lexer::getGrammarFileName() const {
  return "AutoTenV1Lexer.g4";
}

const std::vector<std::string>& AutoTenV1Lexer::getRuleNames() const {
  return autotenv1lexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& AutoTenV1Lexer::getChannelNames() const {
  return autotenv1lexerLexerStaticData->channelNames;
}

const std::vector<std::string>& AutoTenV1Lexer::getModeNames() const {
  return autotenv1lexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& AutoTenV1Lexer::getVocabulary() const {
  return autotenv1lexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView AutoTenV1Lexer::getSerializedATN() const {
  return autotenv1lexerLexerStaticData->serializedATN;
}

const atn::ATN& AutoTenV1Lexer::getATN() const {
  return *autotenv1lexerLexerStaticData->atn;
}




void AutoTenV1Lexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  autotenv1lexerLexerInitialize();
#else
  ::antlr4::internal::call_once(autotenv1lexerLexerOnceFlag, autotenv1lexerLexerInitialize);
#endif
}
