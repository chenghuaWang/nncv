module @__main {
  Aten.func private @printMemrefF64(memref<*xf64>)
  Aten.func private @printMemrefF32(memref<*xf32>)
  Aten.func private @printMemrefF16(memref<*xf16>)
  Aten.func private @printMemrefI64(memref<*xi64>)
  Aten.func private @printMemrefI32(memref<*xi32>)
  Aten.func private @printMemrefI16(memref<*xi16>)
  Aten.func private @printI64(!Aten.int<s, 64>)
  Aten.func private @printF32(f32)
  Aten.func private @printF64(f32)
  Aten.func private @_mlir_ciface_nanoTime() -> !Aten.int<s, 64>
  Aten.func private @printNewline()
  Aten.func public @ReLU(%arg0: memref<2048x2048xf32>, %arg1: memref<2048x2048xf32>) {
    %0 = Aten.const(0.000000e+00 : f32) : f32
    affine.for %arg2 = 0 to 2048 {
      affine.for %arg3 = 0 to 2048 {
        %1 = memref.load %arg0[%arg2, %arg3] : memref<2048x2048xf32>
        %2 = Aten.cmp(gt, %1, %0) : f32, !Aten.bool
        Aten.if %2 then{
          %3 = memref.load %arg0[%arg2, %arg3] : memref<2048x2048xf32>
          memref.store %3, %arg1[%arg2, %arg3] : memref<2048x2048xf32>
        } else {
          memref.store %0, %arg1[%arg2, %arg3] : memref<2048x2048xf32>
        }
      }
    }
    Aten.return
  }
  Aten.func private @main() {
    %alloc = memref.alloc() : memref<2048x2048xf32>
    %alloc_0 = memref.alloc() : memref<2048x2048xf32>
    %0 = Aten.call @_mlir_ciface_nanoTime() : () -> !Aten.int<s, 64>
    %1 = Aten.alloca !Aten.int<s, 64>, aten.ptr <!Aten.int<s, 64>>, ["s"] {alignment = 8 : i64}
    Aten.store %0, %1 : !Aten.int<s, 64>, aten.ptr <!Aten.int<s, 64>>
    Aten.call @ReLU(%alloc, %alloc_0) : (memref<2048x2048xf32>, memref<2048x2048xf32>) -> ()
    %2 = Aten.call @_mlir_ciface_nanoTime() : () -> !Aten.int<s, 64>
    %3 = Aten.alloca !Aten.int<s, 64>, aten.ptr <!Aten.int<s, 64>>, ["e"] {alignment = 8 : i64}
    Aten.store %2, %3 : !Aten.int<s, 64>, aten.ptr <!Aten.int<s, 64>>
    %4 = Aten.load %3 : aten.ptr <!Aten.int<s, 64>>, !Aten.int<s, 64>
    %5 = Aten.load %1 : aten.ptr <!Aten.int<s, 64>>, !Aten.int<s, 64>
    %6 = Aten.binop(sub, %4, %5) : !Aten.int<s, 64>
    %7 = Aten.cast(integral, %6 : !Aten.int<s, 64>), !Aten.int<s, 64>
    Aten.call @printI64(%7) : (!Aten.int<s, 64>) -> ()
    Aten.call @printNewline() : () -> ()
    Aten.return
  }
}
