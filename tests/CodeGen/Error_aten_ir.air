module @__main {
  Aten.func private @testLoopWithEmpty() {
    %0 = Aten.const(#Aten.int<128> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %1 = Aten.const(#Aten.int<0> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %alloc = memref.alloc() : memref<128xf32>
    %2 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["i"] {alignment = 4 : i64}
    Aten.store %1, %2 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    Aten.loop for(cond : {
      %3 = Aten.load %2 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %4 = Aten.cmp(lt, %3, %0) : !Aten.int<s, 32>, !Aten.bool
      %5 = Aten.alloca !Aten.bool, aten.ptr <!Aten.bool>, ["__tmp_condition@0"] {alignment = 1 : i64}
      Aten.store %4, %5 : !Aten.bool, aten.ptr <!Aten.bool>
      Aten.yield
    }, step : {
      %3 = Aten.load %2 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %4 = Aten.unary(inc, %3) : !Aten.int<s, 32>, !Aten.int<s, 32>
      Aten.store %4, %2 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
      Aten.yield
    }) {
      %3 = Aten.alloca f32, aten.ptr <f32>, ["c"] {alignment = 4 : i64}
      %4 = Aten.load %2 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %5 = Aten.cast(int_to_mlir_index, %4 : !Aten.int<s, 32>), index
      %6 = memref.load %alloc[%5] : memref<128xf32>
      Aten.store %6, %3 : f32, aten.ptr <f32>
      Aten.yield
    }
    Aten.call @testLoopWithEmpty() : () -> ()
    Aten.return
  }
}
