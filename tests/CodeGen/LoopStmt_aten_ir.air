module @__main {
  Aten.func private @printMemrefF64(memref<*xf64>)
  Aten.func private @printMemrefF32(memref<*xf32>)
  Aten.func private @printMemrefF16(memref<*xf16>)
  Aten.func private @printMemrefI64(memref<*xi64>)
  Aten.func private @printMemrefI32(memref<*xi32>)
  Aten.func private @printMemrefI16(memref<*xi16>)
  Aten.func private @testFor() -> !Aten.bool {
    %0 = Aten.const(#Aten.int<1> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %1 = Aten.const(#Aten.int<32> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %2 = Aten.const(#Aten.int<0> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %3 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["a"] {alignment = 4 : i64}
    %4 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["b"] {alignment = 4 : i64}
    %5 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["i"] {alignment = 4 : i64}
    Aten.store %2, %5 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    Aten.loop for(cond : {
      %9 = Aten.load %5 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %10 = Aten.cmp(lt, %9, %1) : !Aten.int<s, 32>, !Aten.bool
      %11 = Aten.alloca !Aten.bool, aten.ptr <!Aten.bool>, ["__tmp_condition@0"] {alignment = 1 : i64}
      Aten.store %10, %11 : !Aten.bool, aten.ptr <!Aten.bool>
      Aten.yield
    }, step : {
      %9 = Aten.load %5 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %10 = Aten.unary(inc, %9) : !Aten.int<s, 32>, !Aten.int<s, 32>
      Aten.store %10, %5 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
      Aten.yield
    }) {
      %9 = Aten.load %3 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %10 = Aten.binop(add, %9, %0) : !Aten.int<s, 32>
      Aten.store %10, %3 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
      Aten.yield
    }
    %6 = Aten.load %3 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
    %7 = Aten.load %4 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
    %8 = Aten.cmp(lt, %6, %7) : !Aten.int<s, 32>, !Aten.bool
    Aten.return %8 : !Aten.bool
  }
  Aten.func private @testWhile() {
    %0 = Aten.const(#Aten.int<2> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %1 = Aten.const(#Aten.int<0> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %2 = Aten.const(#Aten.int<16> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %3 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["i"] {alignment = 4 : i64}
    Aten.store %2, %3 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    Aten.loop while(cond : {
      %4 = Aten.load %3 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %5 = Aten.cmp(gt, %4, %1) : !Aten.int<s, 32>, !Aten.bool
      %6 = Aten.alloca !Aten.bool, aten.ptr <!Aten.bool>, ["__tmp_condition@1"] {alignment = 1 : i64}
      Aten.store %5, %6 : !Aten.bool, aten.ptr <!Aten.bool>
      Aten.yield
    }, step : {
      Aten.yield
    }) {
      %4 = Aten.load %3 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %5 = Aten.binop(sub, %4, %0) : !Aten.int<s, 32>
      Aten.store %5, %3 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
      Aten.yield
    }
    Aten.return
  }
  Aten.func private @testLoopWithEmpty() {
    %0 = Aten.const(#Aten.int<10> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %1 = Aten.const(#Aten.int<100> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %2 = Aten.const(#Aten.int<0> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %3 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["i"] {alignment = 4 : i64}
    Aten.store %2, %3 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    Aten.loop for(cond : {
      %5 = Aten.load %3 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %6 = Aten.cmp(lt, %5, %1) : !Aten.int<s, 32>, !Aten.bool
      %7 = Aten.alloca !Aten.bool, aten.ptr <!Aten.bool>, ["__tmp_condition@2"] {alignment = 1 : i64}
      Aten.store %6, %7 : !Aten.bool, aten.ptr <!Aten.bool>
      Aten.yield
    }, step : {
      %5 = Aten.load %3 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %6 = Aten.unary(inc, %5) : !Aten.int<s, 32>, !Aten.int<s, 32>
      Aten.store %6, %3 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
      Aten.yield
    }) {
      %5 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["k"] {alignment = 4 : i64}
      Aten.store %2, %5 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
      Aten.yield
    }
    %4 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["i"] {alignment = 4 : i64}
    Aten.store %0, %4 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    Aten.loop while(cond : {
      %5 = Aten.load %4 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %6 = Aten.cmp(gt, %5, %2) : !Aten.int<s, 32>, !Aten.bool
      %7 = Aten.alloca !Aten.bool, aten.ptr <!Aten.bool>, ["__tmp_condition@3"] {alignment = 1 : i64}
      Aten.store %6, %7 : !Aten.bool, aten.ptr <!Aten.bool>
      Aten.yield
    }, step : {
      Aten.yield
    }) {
      %5 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["k"] {alignment = 4 : i64}
      Aten.store %2, %5 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
      Aten.yield
    }
    Aten.return
  }
  Aten.func private @testWhileUsingInt() {
    %0 = Aten.const(#Aten.int<0> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %1 = Aten.const(#Aten.int<10> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %2 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["i"] {alignment = 4 : i64}
    Aten.store %1, %2 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    Aten.loop while(cond : {
      %3 = Aten.load %2 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %4 = Aten.cmp(ne, %3, %0) : !Aten.int<s, 32>, !Aten.bool
      %5 = Aten.alloca !Aten.bool, aten.ptr <!Aten.bool>, ["__tmp_condition@4"] {alignment = 1 : i64}
      Aten.store %4, %5 : !Aten.bool, aten.ptr <!Aten.bool>
      Aten.yield
    }, step : {
      Aten.yield
    }) {
      %3 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["c"] {alignment = 4 : i64}
      Aten.store %0, %3 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
      %4 = Aten.load %2 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %5 = Aten.unary(dec, %4) : !Aten.int<s, 32>, !Aten.int<s, 32>
      Aten.store %5, %2 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
      Aten.yield
    }
    Aten.return
  }
  Aten.func private @main() {
    %0 = Aten.const(#Aten.int<3> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %1 = Aten.const(#Aten.int<2> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %2 = Aten.const(#Aten.int<0> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %3 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["i"] {alignment = 4 : i64}
    Aten.store %2, %3 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    Aten.loop for(cond : {
      %4 = Aten.load %3 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %5 = Aten.cmp(lt, %4, %1) : !Aten.int<s, 32>, !Aten.bool
      %6 = Aten.cmp(lt, %4, %0) : !Aten.int<s, 32>, !Aten.bool
      %7 = Aten.binop(logic_and, %5, %6) : !Aten.bool
      %8 = Aten.alloca !Aten.bool, aten.ptr <!Aten.bool>, ["__tmp_condition@5"] {alignment = 1 : i64}
      Aten.store %7, %8 : !Aten.bool, aten.ptr <!Aten.bool>
      Aten.yield
    }, step : {
      %4 = Aten.load %3 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %5 = Aten.unary(inc, %4) : !Aten.int<s, 32>, !Aten.int<s, 32>
      Aten.store %5, %3 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
      Aten.yield
    }) {
      %alloc = memref.alloc() : memref<1x1xf32>
      %cast = memref.cast %alloc : memref<1x1xf32> to memref<*xf32>
      Aten.call @printMemrefF32(%cast) : (memref<*xf32>) -> ()
      Aten.yield
    }
    Aten.return
  }
}
