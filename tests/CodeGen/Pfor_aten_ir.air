module @__main {
  Aten.func private @matmul(%arg0: memref<512x512xf32>, %arg1: memref<512x512xf32>, %arg2: memref<512x512xf32>) {
    %0 = Aten.const(#Aten.int<0> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %1 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["i"] {alignment = 4 : i64}
    %2 = Aten.const(#Aten.int<512> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %3 = Aten.const(#Aten.int<1> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    affine.for %arg3 = 0 to 512 {
      %4 = Aten.const(#Aten.int<0> : !Aten.int<s, 32>) : !Aten.int<s, 32>
      %5 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["j"] {alignment = 4 : i64}
      %6 = Aten.const(#Aten.int<512> : !Aten.int<s, 32>) : !Aten.int<s, 32>
      %7 = Aten.const(#Aten.int<1> : !Aten.int<s, 32>) : !Aten.int<s, 32>
      affine.for %arg4 = 0 to 512 {
        %8 = Aten.const(#Aten.int<0> : !Aten.int<s, 32>) : !Aten.int<s, 32>
        %9 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["k"] {alignment = 4 : i64}
        %10 = Aten.const(#Aten.int<512> : !Aten.int<s, 32>) : !Aten.int<s, 32>
        %11 = Aten.const(#Aten.int<1> : !Aten.int<s, 32>) : !Aten.int<s, 32>
        affine.for %arg5 = 0 to 512 {
          %12 = memref.load %arg2[%arg3, %arg4] : memref<512x512xf32>
          %13 = memref.load %arg0[%arg3, %arg5] : memref<512x512xf32>
          %14 = memref.load %arg1[%arg5, %arg4] : memref<512x512xf32>
          %15 = Aten.binop(mul, %13, %14) : f32
          %16 = Aten.binop(add, %12, %15) : f32
          memref.store %16, %arg2[%arg3, %arg4] : memref<512x512xf32>
        }
      }
    }
    Aten.return
  }
  Aten.func private @main() {
    %alloc = memref.alloc() : memref<512x512xf32>
    %alloc_0 = memref.alloc() : memref<512x512xf32>
    %alloc_1 = memref.alloc() : memref<512x512xf32>
    Aten.call @matmul(%alloc, %alloc_0, %alloc_1) : (memref<512x512xf32>, memref<512x512xf32>, memref<512x512xf32>) -> ()
    Aten.return
  }
}
