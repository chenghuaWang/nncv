module @__main {
  Aten.func private @declInt32() -> !Aten.int<s, 32> {
    %0 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["a"] {alignment = 4 : i64}
    %1 = Aten.const(#Aten.int<0> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    Aten.store %1, %0 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    %2 = Aten.load %0 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
    Aten.return %2 : !Aten.int<s, 32>
  }
  Aten.func private @declFloat32() -> f32 {
    %0 = Aten.alloca f32, aten.ptr <f32>, ["b"] {alignment = 4 : i64}
    %1 = Aten.load %0 : aten.ptr <f32>, f32
    Aten.return %1 : f32
  }
  Aten.func private @declTensor() -> memref<128x128xf32> {
    %alloc = memref.alloc() : memref<128x128xf32>
    Aten.return %alloc : memref<128x128xf32>
  }
  Aten.func private @assignFloat32() -> f32 {
    %0 = Aten.const(1.200000e+01 : f32) : f32
    %1 = Aten.alloca f32, aten.ptr <f32>, ["fl"] {alignment = 4 : i64}
    Aten.store %0, %1 : f32, aten.ptr <f32>
    %2 = Aten.load %1 : aten.ptr <f32>, f32
    Aten.return %2 : f32
  }
}
