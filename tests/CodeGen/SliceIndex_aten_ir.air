module @__main {
  Aten.func private @add(%arg0: memref<128x128xf32>, %arg1: memref<128x128xf32>) -> memref<128x128xf32> {
    %0 = Aten.const(#Aten.int<128> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %1 = Aten.const(#Aten.int<0> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %alloc = memref.alloc() : memref<128x128xf32>
    %2 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["i"] {alignment = 4 : i64}
    Aten.store %1, %2 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    Aten.loop for(cond : {
      %3 = Aten.load %2 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %4 = Aten.cmp(lt, %3, %0) : !Aten.int<s, 32>, !Aten.bool
      %5 = Aten.alloca !Aten.bool, aten.ptr <!Aten.bool>, ["__tmp_condition@0"] {alignment = 1 : i64}
      Aten.store %4, %5 : !Aten.bool, aten.ptr <!Aten.bool>
      Aten.yield
    }, step : {
      %3 = Aten.load %2 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %4 = Aten.unary(inc, %3) : !Aten.int<s, 32>, !Aten.int<s, 32>
      Aten.store %4, %2 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
      Aten.yield
    }) {
      %3 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["j"] {alignment = 4 : i64}
      Aten.store %1, %3 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
      Aten.loop for(cond : {
        %4 = Aten.load %3 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
        %5 = Aten.cmp(lt, %4, %0) : !Aten.int<s, 32>, !Aten.bool
        %6 = Aten.alloca !Aten.bool, aten.ptr <!Aten.bool>, ["__tmp_condition@1"] {alignment = 1 : i64}
        Aten.store %5, %6 : !Aten.bool, aten.ptr <!Aten.bool>
        Aten.yield
      }, step : {
        %4 = Aten.load %3 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
        %5 = Aten.unary(inc, %4) : !Aten.int<s, 32>, !Aten.int<s, 32>
        Aten.store %5, %3 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
        Aten.yield
      }) {
        %4 = Aten.load %2 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
        %5 = Aten.load %3 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
        %6 = Aten.cast(int_to_mlir_index, %4 : !Aten.int<s, 32>), index
        %7 = Aten.cast(int_to_mlir_index, %5 : !Aten.int<s, 32>), index
        %8 = memref.load %arg0[%6, %7] : memref<128x128xf32>
        %9 = memref.load %arg1[%6, %7] : memref<128x128xf32>
        %10 = Aten.binop(add, %8, %9) : f32
        memref.store %10, %alloc[%6, %7] : memref<128x128xf32>
        Aten.yield
      }
      Aten.yield
    }
    Aten.return %alloc : memref<128x128xf32>
  }
}
