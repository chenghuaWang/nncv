module @__main {
  Aten.func private @printMemrefF64(memref<*xf64>)
  Aten.func private @printMemrefF32(memref<*xf32>)
  Aten.func private @printMemrefF16(memref<*xf16>)
  Aten.func private @printMemrefI64(memref<*xi64>)
  Aten.func private @printMemrefI32(memref<*xi32>)
  Aten.func private @printMemrefI16(memref<*xi16>)
  Aten.func private @printI64(!Aten.int<s, 64>)
  Aten.func private @printF32(f32)
  Aten.func private @printF64(f32)
  Aten.func private @_mlir_ciface_nanoTime() -> !Aten.int<s, 64>
  Aten.func private @printNewline()
  Aten.func private @main() {
    %0 = Aten.const(0.000000e+00 : f32) : f32
    %1 = Aten.const(3.000000e+00 : f32) : f32
    %2 = Aten.const(2.000000e+00 : f32) : f32
    %3 = Aten.const(1.000000e+00 : f32) : f32
    %4 = Aten.alloca f32, aten.ptr <f32>, ["a"] {alignment = 4 : i64}
    Aten.store %3, %4 : f32, aten.ptr <f32>
    %5 = Aten.alloca f32, aten.ptr <f32>, ["b"] {alignment = 4 : i64}
    Aten.store %2, %5 : f32, aten.ptr <f32>
    %6 = Aten.alloca f32, aten.ptr <f32>, ["c"] {alignment = 4 : i64}
    Aten.store %1, %6 : f32, aten.ptr <f32>
    %7 = Aten.binop(sub, %0, %3) : f32
    %8 = Aten.alloca f32, aten.ptr <f32>, ["d"] {alignment = 4 : i64}
    Aten.store %7, %8 : f32, aten.ptr <f32>
    %9 = Aten.load %8 : aten.ptr <f32>, f32
    %10 = math.absf %9 : f32
    Aten.call @printF32(%10) : (f32) -> ()
    Aten.call @printNewline() : () -> ()
    %11 = Aten.load %4 : aten.ptr <f32>, f32
    %12 = math.exp %11 : f32
    Aten.call @printF32(%12) : (f32) -> ()
    Aten.call @printNewline() : () -> ()
    %13 = Aten.load %5 : aten.ptr <f32>, f32
    %14 = math.exp %13 : f32
    Aten.call @printF32(%14) : (f32) -> ()
    Aten.call @printNewline() : () -> ()
    %15 = Aten.load %8 : aten.ptr <f32>, f32
    %16 = math.exp %15 : f32
    Aten.call @printF32(%16) : (f32) -> ()
    Aten.call @printNewline() : () -> ()
    %17 = Aten.load %4 : aten.ptr <f32>, f32
    %18 = math.exp2 %17 : f32
    Aten.call @printF32(%18) : (f32) -> ()
    Aten.call @printNewline() : () -> ()
    %19 = Aten.load %6 : aten.ptr <f32>, f32
    %20 = math.exp2 %19 : f32
    Aten.call @printF32(%20) : (f32) -> ()
    Aten.call @printNewline() : () -> ()
    %21 = math.fma %3, %2, %1 : f32
    Aten.call @printF32(%21) : (f32) -> ()
    Aten.call @printNewline() : () -> ()
    Aten.return
  }
}
