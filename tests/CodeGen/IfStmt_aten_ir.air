module @__main {
  Aten.func private @printMemrefF64(memref<*xf64>)
  Aten.func private @printMemrefF32(memref<*xf32>)
  Aten.func private @printMemrefF16(memref<*xf16>)
  Aten.func private @printMemrefI64(memref<*xi64>)
  Aten.func private @printMemrefI32(memref<*xi32>)
  Aten.func private @printMemrefI16(memref<*xi16>)
  Aten.func private @printI64(!Aten.int<s, 64>)
  Aten.func private @printF32(f32)
  Aten.func private @printF64(f32)
  Aten.func private @_mlir_ciface_nanoTime() -> !Aten.int<s, 64>
  Aten.func private @printNewline()
  Aten.func private @testIfWoElse(%arg0: !Aten.int<s, 32>, %arg1: !Aten.int<s, 32>) -> !Aten.int<s, 32> {
    %0 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["c"] {alignment = 4 : i64}
    %1 = Aten.cmp(lt, %arg0, %arg1) : !Aten.int<s, 32>, !Aten.bool
    Aten.if %1 then{
      %3 = Aten.binop(add, %arg0, %arg1) : !Aten.int<s, 32>
      Aten.store %3, %0 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    }
    %2 = Aten.load %0 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
    Aten.return %2 : !Aten.int<s, 32>
  }
  Aten.func private @testIfWElse(%arg0: !Aten.int<s, 32>, %arg1: !Aten.int<s, 32>) -> !Aten.int<s, 32> {
    %0 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["c"] {alignment = 4 : i64}
    %1 = Aten.cmp(lt, %arg0, %arg1) : !Aten.int<s, 32>, !Aten.bool
    Aten.if %1 then{
      %3 = Aten.binop(add, %arg0, %arg1) : !Aten.int<s, 32>
      Aten.store %3, %0 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    } else {
      %3 = Aten.binop(sub, %arg0, %arg1) : !Aten.int<s, 32>
      Aten.store %3, %0 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    }
    %2 = Aten.load %0 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
    Aten.return %2 : !Aten.int<s, 32>
  }
  Aten.func private @testNestedIf() -> !Aten.bool {
    %0 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["lhs"] {alignment = 4 : i64}
    %1 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["rhs"] {alignment = 4 : i64}
    %2 = Aten.load %0 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
    %3 = Aten.load %1 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
    %4 = Aten.cmp(lt, %2, %3) : !Aten.int<s, 32>, !Aten.bool
    Aten.if %4 then{
      %8 = Aten.load %0 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %9 = Aten.load %1 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %10 = Aten.cmp(lt, %8, %9) : !Aten.int<s, 32>, !Aten.bool
      Aten.if %10 then{
      } else {
      }
    }
    %5 = Aten.load %0 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
    %6 = Aten.load %1 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
    %7 = Aten.cmp(lt, %5, %6) : !Aten.int<s, 32>, !Aten.bool
    Aten.return %7 : !Aten.bool
  }
  Aten.func private @testIfWBreak(%arg0: !Aten.int<s, 32>, %arg1: !Aten.int<s, 32>) -> !Aten.int<s, 32> {
    %0 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["c"] {alignment = 4 : i64}
    %1 = Aten.cmp(lt, %arg0, %arg1) : !Aten.int<s, 32>, !Aten.bool
    Aten.if %1 then{
      %3 = Aten.binop(add, %arg0, %arg1) : !Aten.int<s, 32>
      Aten.store %3, %0 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
      %4 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["d"] {alignment = 4 : i64}
      %5 = Aten.load %0 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %6 = Aten.binop(add, %5, %arg1) : !Aten.int<s, 32>
      Aten.store %6, %4 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    }
    %2 = Aten.load %0 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
    Aten.return %2 : !Aten.int<s, 32>
  }
  Aten.func private @testIntInIfCondition(%arg0: !Aten.int<s, 32>) -> !Aten.int<s, 32> {
    %0 = Aten.const(#Aten.int<0> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %1 = Aten.const(#Aten.int<42> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %2 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["b"] {alignment = 4 : i64}
    Aten.store %1, %2 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    %3 = Aten.cmp(ne, %arg0, %0) : !Aten.int<s, 32>, !Aten.bool
    Aten.if %3 then{
      %5 = Aten.load %2 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
      %6 = Aten.unary(inc, %5) : !Aten.int<s, 32>, !Aten.int<s, 32>
      Aten.store %6, %2 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    }
    %4 = Aten.load %2 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
    Aten.return %4 : !Aten.int<s, 32>
  }
  Aten.func private @main() {
    %0 = Aten.const(#Aten.int<3> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %1 = Aten.const(#Aten.int<2> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %2 = Aten.const(#Aten.int<1> : !Aten.int<s, 32>) : !Aten.int<s, 32>
    %3 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["a"] {alignment = 4 : i64}
    Aten.store %2, %3 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    %4 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["b"] {alignment = 4 : i64}
    Aten.store %1, %4 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    %5 = Aten.alloca !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>, ["c"] {alignment = 4 : i64}
    Aten.store %0, %5 : !Aten.int<s, 32>, aten.ptr <!Aten.int<s, 32>>
    %6 = Aten.load %3 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
    %7 = Aten.load %4 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
    %8 = Aten.cmp(lt, %6, %7) : !Aten.int<s, 32>, !Aten.bool
    %9 = Aten.load %5 : aten.ptr <!Aten.int<s, 32>>, !Aten.int<s, 32>
    %10 = Aten.cmp(lt, %7, %9) : !Aten.int<s, 32>, !Aten.bool
    %11 = Aten.binop(logic_and, %8, %10) : !Aten.bool
    Aten.if %11 then{
      %alloc = memref.alloc() : memref<1x1xf32>
      %cast = memref.cast %alloc : memref<1x1xf32> to memref<*xf32>
      Aten.call @printMemrefF32(%cast) : (memref<*xf32>) -> ()
    }
    Aten.return
  }
}
